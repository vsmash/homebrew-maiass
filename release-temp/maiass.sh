#!/usr/bin/env bash
# Packed bundle: decodes embedded payload then evals it.
_decode() {
  base64 -d
}
eval "$(_decode <<'__PAYLOAD__'
# Generated by scripts/bundle-bash.sh on 2025-08-18T01:43:47Z
# Entry: maiass.sh
# Note: This is a bundled file. Do not edit directly.
export __MAIASS_BUNDLED=1

# ---------------------------------------------------------------
# MAIASS (Modular AI-Augmented Semantic Scribe) v5.8.15
# Intelligent Git workflow automation script
# Copyright (c) 2025 Velvary Pty Ltd
# All rights reserved.
# This function is part of the Velvary bash scripts library.
# Author: vsmash <670252+vsmash@users.noreply.github.com>
# ---------------------------------------------------------------
# Resolve this script’s real path even if symlinked
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do
  DIR="$(cd -P "$(dirname "$SOURCE")" >/dev/null 2>&1 && pwd)"
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
done
SCRIPT_PATH="$(cd -P "$(dirname "$SOURCE")" >/dev/null 2>&1 && pwd)"

# Detect libexec layout: in dev, lib is next to the script; in brew, it's nested
if [[ -d "$SCRIPT_PATH/lib/core" ]]; then
  LIBEXEC_DIR="$SCRIPT_PATH/lib"
else
  LIBEXEC_DIR="$SCRIPT_PATH/../libexec/lib"
fi
PROJECT_DIR="$(pwd)"

# Make main script path and version available to all sourced libs
export MAIASS_MAIN_SCRIPT="$SOURCE"
# Prefer explicit env override, else parse from script header comment, else 0.0.0
export MAIASS_CLIENT_VERSION=5.8.15

# --- Begin inlined: /Volumes/enigmadev/enigmadev/static/maiass-whole/bashmaiass/lib/core/logger.sh ---
if [[ -z "${__SRC__Volumes_enigmadev_enigmadev_static_maiass_whole_bashmaiass_lib_core_logger_sh:-}" ]]; then __SRC__Volumes_enigmadev_enigmadev_static_maiass_whole_bashmaiass_lib_core_logger_sh=1

supports_unicode() {
  case "$OSTYPE" in
    msys*|cygwin*|win32)
      [[ -n "$WT_SESSION" || "$TERM_PROGRAM" == "vscode" ]] && return 0
      return 1
      ;;
    *)
      [[ "$LANG" =~ UTF-8 || "$LC_ALL" =~ UTF-8 ]] && return 0
      return 1
      ;;
  esac
}
export unicode_supported=supports_unicode

supports_truecolor() { [[ "${COLORTERM:-}" == *truecolor* || "${COLORTERM:-}" == *24bit* ]]; }
supports_256color()  { local n; n=$(tput colors 2>/dev/null || echo 0); [ "$n" -ge 256 ]; }

export twofivesixcolor_supported=supports_256color
export truecolor_supported=supports_truecolor

# Color and style definitions
# Bold colors (for emphasis and important messages)
BCyan='\033[1;36m'      # Bold Cyan
BRed='\033[1;31m'       # Bold Red
BGreen='\033[1;32m'     # Bold Green
BBlue='\033[1;34m'      # Bold Blue
BYellow='\033[1;33m'    # Bold Yellow
BPurple='\033[1;35m'    # Bold Purple
BWhite='\033[1;37m'     # Bold White
BMagenta='\033[1;35m'   # Bold Magenta
BAqua='\033[1;96m'      # Bold Aqua
BSoftPink='\033[38;5;218m' # Bold Soft Pink
BNavy='\033[1;34m'      # Bold Navy
BGrey='\033[1;35m'      # Bold Grey
BOrange='\033[1;38;2;255;165;0m'    # Bold Orange

# Regular colors (for standard messages)
Cyan='\033[0;36m'       # Cyan
Red='\033[0;31m'        # Red
Green='\033[0;32m'      # Green
Blue='\033[0;34m'       # Blue
Yellow='\033[0;33m'     # Yellow
Purple='\033[0;35m'     # Purple
White='\033[0;37m'      # White
Magenta='\033[0;35m'    # Magenta
Aqua='\033[0;96m'       # Aqua
SoftPink='\033[38;5;218m' # Soft Pink
Navy='\033[0;34m'       # Navy
Grey='\033[0;35m'      # Grey
Orange='\033[38;5;208m'   # Orange

# Special formatting
Color_Off='\033[0m'     # Text Reset
BWhiteBG='\033[47m'     # White Background
NC='\033[0m'
Bold='\033[1m'
Underline='\033[4m'
Reverse='\033[7m'
Reset='\033[0m'

# Print a section header
print_section() {
    echo -e "\n${Yellow}▶ $1${Color_Off}"
}

# Logging function - writes to log file if logging is enabled
log_message() {
    if [[ "$enable_logging" == "true" ]]; then
        echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" >> "$log_file"
    fi
}

# Print a success message
print_success() {
    echo -e "${Green}✔ $1${Color_Off}"
    log_message "SUCCESS: $1"
}

# Print a message that's always shown regardless of verbosity level
print_always(){
  local message="$1"
  echo -e "${Aqua}ℹ $message${Color_Off}"
  log_message "INFO: $message"
}

# Print an info message with verbosity level support
# Usage: print_info "message" [level]
# Levels: brief, normal, debug (default: normal)
print_info() {
    local message="$1"
    local level="${2:-brief}"
    # if level=always, show message regardless of verbosity level
    if [[ "$level" == "always" ]]; then
        echo -e "${BSoftPink}|)) ${Color_Off}$message${Color_Off}"
        log_message "INFO: $message"
        return
    fi

    # For backward compatibility, treat debug_mode=true as verbosity_level=debug
    if [[ "$debug_mode" == "true" && "$verbosity_level" != "debug" ]]; then
        # Only log this when not already in debug verbosity to avoid noise
        log_message "DEPRECATED: Using debug_mode=true is deprecated. Please use MAIASS_VERBOSITY=debug instead."
        # Treat as if verbosity_level is debug
        local effective_verbosity="debug"
    else
        local effective_verbosity="$verbosity_level"
    fi

    # Show based on verbosity level
    case "$effective_verbosity" in
        "brief")
            # Only show essential messages in brief mode
            if [[ "$level" == "brief" ]]; then
                echo -e "${BSoftPink}|)) ${Color_Off}$message${Color_Off}"
            fi
            ;;
        "normal")
            # Show brief and normal messages
            if [[ "$level" == "brief" || "$level" == "normal" ]]; then
                echo -e "${BSoftPink}|)) ${Color_Off}$message${Color_Off}"
            fi
            ;;
        "debug")
            # Show all messages, use bold for debug level messages
            if [[ "$level" == "debug" ]]; then
                echo -e "${BSoftPink}|)) ${Color_Off}$message${Color_Off}"
            else
                echo -e "${BSoftPink}|)) ${Color_Off}$message${Color_Off}"
            fi
            ;;
    esac

    log_message "INFO: $message"
}

# Print a warning message
print_warning() {
    echo -e "${Orange}⚠ $1${Color_Off}"
    log_message "WARNING: $1"
}

# Print an error message (using bold for emphasis as errors are important)
print_error() {
    echo -e "${BRed}✘ $1${Color_Off}"
    log_message "ERROR: $1"
}

# Print a section header (always shown regardless of verbosity)
print_section() {
    echo -e "\n${White}▶ $1${Color_Off}"
    log_message "SECTION: $1"
}

print_debug(){
    local message="$1"
    # For backward compatibility, treat debug_mode=true as verbosity_level=debug
    if [[ "$debug_mode" == "true" && "$verbosity_level" != "debug" ]]; then
        # Only log this when not already in debug verbosity to avoid noise
        log_message "DEPRECATED: Using debug_mode=true is deprecated. Please use MAIASS_VERBOSITY=debug instead."
        # Treat as if verbosity_level is debug
        local effective_verbosity="debug"
    else
        local effective_verbosity="$verbosity_level"
    fi
    if [[ "$effective_verbosity" == "debug" ]]; then
        echo -e "${Color_Off}🐛$message${Color_Off}"
        log_message "DEBUG: $message"
    fi

}

# Linear interpolation between two hex colors
interpolate_color() {
  local start="$1" end="$2" value="$3" min="$4" max="$5"
  local sr=$(printf "%d" 0x${start:1:2})
  local sg=$(printf "%d" 0x${start:3:2})
  local sb=$(printf "%d" 0x${start:5:2})
  local er=$(printf "%d" 0x${end:1:2})
  local eg=$(printf "%d" 0x${end:3:2})
  local eb=$(printf "%d" 0x${end:5:2})

  # normalize value into 0..1
  local ratio=$(( (value - min) * 1000 / (max - min) ))
  [[ $ratio -lt 0 ]] && ratio=0
  [[ $ratio -gt 1000 ]] && ratio=1000

  local r=$(( sr + (er - sr) * ratio / 1000 ))
  local g=$(( sg + (eg - sg) * ratio / 1000 ))
  local b=$(( sb + (eb - sb) * ratio / 1000 ))

  printf "#%02X%02X%02X\n" $r $g $b
}

# Master function
credit_color() {
  local credits="$1"
  if (( credits >= 1000 )); then
    echo "#00FF00" # green
  elif (( credits >= 300 )); then
    interpolate_color "#00FFFF" "#FFA500" "$credits" 300 1000
  else
    interpolate_color "#FFA500" "#FF0000" "$credits" 0 300
  fi
}

# Integer RGB interpolation between two hex colors.
# Usage: interpolate_color "#RRGGBB" "#RRGGBB" value min max  -> echoes "#RRGGBB"
interpolate_color() {
  local start="$1" end="$2" val="$3" min="$4" max="$5"
  # Clamp
  [ "$val" -lt "$min" ] && val="$min"
  [ "$val" -gt "$max" ] && val="$max"
  local range=$(( max - min )); [ "$range" -le 0 ] && range=1
  local pos=$(( val - min ))

  # Hex -> int
  local sr=$((16#${start:1:2})) sg=$((16#${start:3:2})) sb=$((16#${start:5:2}))
  local er=$((16#${end:1:2}))   eg=$((16#${end:3:2}))   eb=$((16#${end:5:2}))

  # Linear interp (integer math)
  local r=$(( sr + ( (er - sr) * pos ) / range ))
  local g=$(( sg + ( (eg - sg) * pos ) / range ))
  local b=$(( sb + ( (eb - sb) * pos ) / range ))

  printf "#%02X%02X%02X\n" "$r" "$g" "$b"
}

# Simple detector: many terminals export COLORTERM=truecolor/24bit
supports_truecolor() {
  [ "${COLORTERM:-}" = "truecolor" ] || [ "${COLORTERM:-}" = "24bit" ]
}

# Credits → colored text, traffic-light gradient
# Bands:
#   >=1000 solid green
#   600–1000 interpolate green→yellow
#   300–600  interpolate yellow→orange
#   0–300    interpolate orange→red
print_credit_color() {
  local credits="$1" text="${2:-$1}" hex r g b

  if [ "$credits" -ge 1000 ]; then
    hex="#00AA00"                                  # solid green (not neon)
  elif [ "$credits" -gt 600 ]; then
    hex=$(interpolate_color "#00AA00" "#FFFF00" "$credits" 600 1000)  # green→yellow
  elif [ "$credits" -gt 300 ]; then
    hex=$(interpolate_color "#FFFF00" "#FFA500" "$credits" 300 600)   # yellow→orange
  elif [ "$credits" -ge 0 ]; then
    hex=$(interpolate_color "#FFA500" "#FF0000" "$credits" 0 300)     # orange→red
  else
    hex="#FF0000"                                   # negative → red
  fi

  if supports_truecolor; then
    r=$((16#${hex:1:2})); g=$((16#${hex:3:2})); b=$((16#${hex:5:2}))
    printf "\033[38;2;%d;%d;%dm%s\033[0m\n" "$r" "$g" "$b" "$text"
  else
    # 256-color fallback to nearest fixed colors (no gradient)
    # green=34, yellow=226, orange≈208, red=196
    local code
    if   [ "$credits" -ge 1000 ]; then code=34
    elif [ "$credits" -gt 600  ]; then code=226
    elif [ "$credits" -gt 300  ]; then code=208
    else                               code=196
    fi
    printf "\033[38;5;%dm%s\033[0m\n" "$code" "$text"
  fi
}

# print a line that has a gradient of colors from one to another. default to soft pink to burgundy
# use a unicode dash if unicode is supported or a regular dash if not
print_gradient_line() {
  # Defaults: soft pink -> burgundy
  local repeat="${1:-80}"
  local start_hex="${2:-#f7b2c4}"   # soft pink
  local end_hex="${3:-#6b0022}"     # burgundy
  local char reset

  # Prefer Unicode long dash
  char='═'
  reset="${Color_Off:-\\033[0m}"

  # Truecolor path (smoothest)
  if supports_truecolor; then
    local sh="${start_hex#\#}" eh="${end_hex#\#}"
    local r1=$((16#${sh:0:2})) g1=$((16#${sh:2:2})) b1=$((16#${sh:4:2}))
    local r2=$((16#${eh:0:2})) g2=$((16#${eh:2:2})) b2=$((16#${eh:4:2}))
    awk -v n="$repeat" -v c="$char" -v r1="$r1" -v g1="$g1" -v b1="$b1" -v r2="$r2" -v g2="$g2" -v b2="$b2" '
      BEGIN {
        for (i = 0; i < n; i++) {
          t = (n > 1) ? i / (n - 1) : 0
          r = int(r1 + (r2 - r1) * t + 0.5)
          g = int(g1 + (g2 - g1) * t + 0.5)
          b = int(b1 + (b2 - b1) * t + 0.5)
          printf("\033[38;2;%d;%d;%dm%s", r, g, b, c)
        }
        printf("\033[0m\n")
      }'
    return
  fi

  # 256-color fallback (blocky but decent)
  if supports_256color; then
    # Pink -> burgundy-ish palette
    local palette=(224 217 218 212 211 210 205 204 198 197 161 125 89 88 52)
    local total=${#palette[@]}
    local printed=0
    local per=$(( (repeat + total - 1) / total ))
    local spaces chunk code count
    while [ "$printed" -lt "$repeat" ]; do
      for code in "${palette[@]}"; do
        count=$(( repeat - printed ))
        [ "$count" -le 0 ] && break
        [ "$count" -gt "$per" ] && count="$per"
        printf "\033[38;5;%sm" "$code"
        spaces=$(printf "%*s" "$count" "")
        # replace spaces with the chosen char (works with multibyte replacement)
        printf "%s" "${spaces// /$char}"
        printed=$(( printed + count ))
      done
    done
    printf "\033[0m\n"
    return
  fi

  # Plain ASCII fallback
  local spaces=$(printf "%*s" "$repeat" "")
  printf "%s\n" "${spaces// /$char}"
}

# print line function with optional colour and character
print_line() {
    local color="${1:-$BBlue}"   # default to $BBlue if unset
    local char="${2:-=}"         # default to '='
    local repeat="${3:-80}"      # default to 80
    local line

    line=$(printf "%*s" "$repeat" "" | tr ' ' "$char")
    echo -e "${color}${line}${Color_Off}"
}

colour_maiass(){
  local reset=$'\e[0m'
  # Soft pink -> burgundy across M A I A S S
  local -a cols=(218 211 205 198 161 88)
  local word="MAIASS"
  local colored=""
  for ((i=0; i<${#word}; i++)); do
    colored+=$'\e[38;5;'${cols[i]}m"${word:i:1}"
  done
  echo $colored
}

print_thanks() {
  local reset=$'\e[0m'
  local maiass=$(colour_maiass)
  printf '\e[38;5;218m|)) %s Thank you for using %s%s! ✨\n' "$reset" "$maiass" "$reset"
}

# devlog.sh is my personal script for logging work in google sheets.
# if devlog.sh is not a bash script, create an empty function to prevent errors
if [ -z "$(type -t devlog.sh)" ]; then
    function devlog.sh() {
        :
    }
fi

# Print a decorated header
print_header() {

    local maiass=$(colour_maiass)
    print_gradient_line 60 "#0000FF" "#29CCC1"
    echo -e "${BSoftPink}|))${BBlue}             Welcome to ${maiass} ${Blue} RC v${MAIASS_CLIENT_VERSION} ${Color_Off}"
    print_gradient_line 60 "#0000FF" "#29CCC1"
}

function logthis(){
    # branch_name jira_ticket_number project_name client_name
    # shellcheck disable=SC1073
    debugmsg=$(devlog.sh -- "$1" "?" "${project_name:=MAIASSS}" "${client_name:=Velvary}" "${jira_ticket_number:=Devops}") >/dev/null 2>&1
}

fi # __SRC__Volumes_enigmadev_enigmadev_static_maiass_whole_bashmaiass_lib_core_logger_sh
# --- End inlined: /Volumes/enigmadev/enigmadev/static/maiass-whole/bashmaiass/lib/core/logger.sh ---

# --- Begin inlined: /Volumes/enigmadev/enigmadev/static/maiass-whole/bashmaiass/lib/config/envars.sh ---
if [[ -z "${__SRC__Volumes_enigmadev_enigmadev_static_maiass_whole_bashmaiass_lib_config_envars_sh:-}" ]]; then __SRC__Volumes_enigmadev_enigmadev_static_maiass_whole_bashmaiass_lib_config_envars_sh=1

# Environment variables are now loaded with secure priority system above

# Secure environment variable loading with priority order
load_environment_variables() {
    local project_env=".env.maiass"

    # Priority 1: Project-specific env file
    if [[ -f "$project_env" ]]; then
        print_info "Loading project configuration from ${BCyan}$project_env${Color_Off}" "debug"
        source "$project_env"
    fi

    # Priority 2: Secure storage (cross-platform)
    load_secure_variables

    # Priority 3: System environment (already exported by shell, nothing to load)
}

# Load sensitive variables from secure storage
load_secure_variables() {
    local secure_vars=("MAIASS_AI_TOKEN" "MAIASS_SUBSCRIPTION_ID")
    local token_prompted=0

    for var in "${secure_vars[@]}"; do
        # Check if we should prefer secure storage over environment variable
        local prefer_secure=false
        if [[ "$var" == "MAIASS_AI_TOKEN" && -n "${!var}" ]]; then
            # Check if the existing token looks invalid
            if [[ "${!var}" =~ ^invalid_|^test_|_test$ ]] || [[ "${!var}" == "DISABLED" ]]; then
                prefer_secure=true
                print_debug "DEBUG: Environment token appears invalid, checking secure storage" "debug"
            fi
        fi
        
        # Skip if already set with valid token (unless we want to prefer secure storage)
        if [[ -n "${!var}" && "$prefer_secure" != "true" ]]; then
            continue  # already set via .env or env var
        fi

        local value=""
        if [[ "$OSTYPE" == "darwin"* ]]; then
            value=$(security find-generic-password -s "maiass" -a "$var" -w 2>/dev/null)
        elif command -v secret-tool >/dev/null 2>&1; then
            value=$(secret-tool lookup service maiass key "$var" 2>/dev/null)
        fi

        if [[ -n "$value" ]]; then
            export "$var"="$value"
            if [[ "$prefer_secure" == "true" ]]; then
                print_debug "DEBUG: Replaced invalid environment token with secure storage token" "debug"
            else
                print_debug "DEBUG: Loaded $var from secure storage" "debug"
            fi
        elif [[ "$var" == "MAIASS_AI_TOKEN" && -z "$value" && -z "${!var}" && "$token_prompted" -eq 0 ]]; then
            # Handle missing AI token - check if we should automatically create anonymous subscription
            if [[ ! -t 0 ]]; then
                print_warning "AI token not found and terminal is not interactive. Please set MAIASS_AI_TOKEN environment variable."
                continue
            fi

            # Check if automatic anonymous subscription is enabled (check env var directly)
            if [[ "${MAIASS_AI_INVALID_TOKEN_CHOICES:-}" == "false" ]]; then
                # Check if we already tried to create anonymous subscription this session
                if [[ "$_MAIASS_ANON_ATTEMPTED" != "true" ]]; then
                    print_info "No AI token found. Automatically creating anonymous subscription..."
                    export _MAIASS_ANON_ATTEMPTED="true"
                    
                    # We need to call the anonymous subscription function, but it's in ai.sh
                    # For now, just mark that we need to handle this in the AI module
                    export _MAIASS_NEED_ANON_TOKEN="true"
                    export MAIASS_AI_TOKEN=""  # Set empty to trigger AI module handling
                else
                    print_warning "Anonymous subscription already attempted this session. AI features will be disabled."
                    export MAIASS_AI_TOKEN="DISABLED"
                fi
            fi
        fi
    done
}
# Store sensitive variables in secure storage
store_secure_variable() {
    local var_name="$1"
    local var_value="$2"

    if [[ "$OSTYPE" == "darwin"* ]]; then
        echo "$var_value" | security add-generic-password -U -s "maiass" -a "$var_name" -w - 2>/dev/null
    elif command -v secret-tool >/dev/null 2>&1; then
        echo -n "$var_value" | secret-tool store --label="MAIASS $var_name" service maiass key "$var_name"
    else
        print_warning "No secure storage backend available"
        return 1
    fi
}

# Remove sensitive variables from secure storage
remove_secure_variable() {
    local var_name="$1"

    if [[ "$OSTYPE" == "darwin"* ]]; then
        security delete-generic-password -s "maiass" -a "$var_name" 2>/dev/null
    elif command -v secret-tool >/dev/null 2>&1; then
        # No direct delete with secret-tool; need to use keyring CLI or let user handle it
        print_warning "Removing secrets from Linux keyrings requires manual intervention"
    else
        print_warning "No secure storage backend available"
        return 1
    fi
}

fi # __SRC__Volumes_enigmadev_enigmadev_static_maiass_whole_bashmaiass_lib_config_envars_sh
# --- End inlined: /Volumes/enigmadev/enigmadev/static/maiass-whole/bashmaiass/lib/config/envars.sh ---

# Load environment variables with new priority system
load_environment_variables

export ignore_local_env="${MAIASS_IGNORE_LOCAL_ENV:=false}"

# --- Begin inlined: /Volumes/enigmadev/enigmadev/static/maiass-whole/bashmaiass/lib/utils/utils.sh ---
if [[ -z "${__SRC__Volumes_enigmadev_enigmadev_static_maiass_whole_bashmaiass_lib_utils_utils_sh:-}" ]]; then __SRC__Volumes_enigmadev_enigmadev_static_maiass_whole_bashmaiass_lib_utils_utils_sh=1

mask_api_key() {
    local api_key="$1"

    # Check if key is empty or too short
    if [[ -z "$api_key" ]] || [[ ${#api_key} -lt 8 ]]; then
        echo "[INVALID_KEY]"
        return
    fi

    # Extract first 4 and last 4 characters using parameter expansion
    local first_four="${api_key:0:4}"
    local last_four="${api_key: -4}"

    echo "${first_four}****${last_four}"
}

escape_regex() {
  # Escapes all regex metacharacters
  echo "$1" | sed -e 's/[][\/.^$*+?(){}|]/\\&/g'
}

generate_machine_fingerprint() {
    local components=()
    local has_real_hardware_info=0
    local fallback_used=0

    # Helper function to safely get command output with fallback
    safe_command() {
        local cmd="$1"
        local fallback="$2"
        local output
        output=$($cmd 2>/dev/null || echo "$fallback")
        # Clean up the output to be a single line
        echo "$output" | tr -d '\n' | tr -s ' ' ' '
    }

    # Get CPU info
    local cpu_info
    if [[ "$OSTYPE" == "darwin"* ]]; then
        cpu_info=$(sysctl -n machdep.cpu.brand_string 2>/dev/null || uname -m)
    else
        cpu_info=$(grep -m1 "model name" /proc/cpuinfo 2>/dev/null | cut -d: -f2- | sed 's/^[ \t]*//' || uname -m)
    fi
    components+=("${cpu_info:-unknown_cpu}")

    # Get memory info
    local mem_info
    if [[ "$OSTYPE" == "darwin"* ]]; then
        mem_info=$(sysctl -n hw.memsize 2>/dev/null || echo "unknown_mem")
    else
        mem_info=$(grep -m1 "MemTotal" /proc/meminfo 2>/dev/null || echo "unknown_mem")
    fi
    components+=("${mem_info}")

    # Get hardware info
    local hardware_info
    if [[ "$OSTYPE" == "darwin"* ]]; then
        hardware_info=$(system_profiler SPHardwareDataType 2>/dev/null | grep -E "Serial Number|Hardware UUID" | head -2 | tr '\n' ' ' || echo "unknown_hardware")
    else
        hardware_info=$(dmidecode -t system 2>/dev/null | grep -E "Serial Number|UUID" | head -2 | tr '\n' ' ' || echo "unknown_hardware")
    fi
    components+=("${hardware_info}")

    # Add architecture, username, and platform
    components+=("$(uname -m)")
    components+=("$(whoami 2>/dev/null || echo "unknown_user")")
    components+=("$(uname -s)")

    # Check if we have sufficient hardware info for security
    if [[ "${components[2]}" == *"unknown"* ]]; then
        has_real_hardware_info=0
        print_warning "WARNING: Using fallback fingerprint - hardware detection failed"
        print_warning "This may allow easier abuse. Consider checking system permissions."
    else
        has_real_hardware_info=1
    fi

    # Create a stable hash from all components
    local fingerprint_data
    fingerprint_data=$(printf "%s|" "${components[@]}" | tr -d '\n')

    # Debug output if in debug mode
    if [[ "$debug_mode" == "true" ]]; then
        print_debug "  DEBUG: Machine fingerprint components:" "debug"
        print_debug "  CPU: ${components[0]}" "debug"
        print_debug "  Memory: ${components[1]}" "debug"
        print_debug "  Hardware: ${components[2]}" "debug"
        print_debug "  Arch: ${components[3]}" "debug"
        print_debug "  Username: ${components[4]}" "debug"
        print_debug "  Platform: ${components[5]}" "debug"
        print_debug "  HasRealHardwareInfo: $has_real_hardware_info" "debug"
    fi

    # Generate SHA-256 hash in base64
    local hash
    if command -v openssl >/dev/null 2>&1; then
        hash=$(printf "%s" "$fingerprint_data" | openssl dgst -sha256 -binary | openssl base64 | tr -d '\n')
    elif command -v sha256sum >/dev/null 2>&1; then
        hash=$(printf "%s" "$fingerprint_data" | sha256sum | cut -d' ' -f1 | xxd -r -p | base64 | tr -d '\n')
    else
        # Last resort fallback
        print_warning "SECURITY WARNING: Using minimal fallback fingerprint (no hashing tools available)"
        local fallback="$(uname -s)-$(uname -m)-$(whoami 2>/dev/null || echo "unknown")-FALLBACK"
        if command -v base64 >/dev/null 2>&1; then
            hash=$(printf "%s" "$fallback" | base64 | tr -d '\n')
        else
            # If even base64 is not available, just use the string as is
            hash="$fallback"
        fi
        fallback_used=1
    fi

    echo "$hash"
    return $fallback_used
}

fi # __SRC__Volumes_enigmadev_enigmadev_static_maiass_whole_bashmaiass_lib_utils_utils_sh
# --- End inlined: /Volumes/enigmadev/enigmadev/static/maiass-whole/bashmaiass/lib/utils/utils.sh ---

# --- Begin inlined: /Volumes/enigmadev/enigmadev/static/maiass-whole/bashmaiass/lib/core/logger.sh ---
if [[ -z "${__SRC__Volumes_enigmadev_enigmadev_static_maiass_whole_bashmaiass_lib_core_logger_sh:-}" ]]; then __SRC__Volumes_enigmadev_enigmadev_static_maiass_whole_bashmaiass_lib_core_logger_sh=1

fi # __SRC__Volumes_enigmadev_enigmadev_static_maiass_whole_bashmaiass_lib_core_logger_sh
# --- End inlined: /Volumes/enigmadev/enigmadev/static/maiass-whole/bashmaiass/lib/core/logger.sh ---

# --- Begin inlined: /Volumes/enigmadev/enigmadev/static/maiass-whole/bashmaiass/lib/core/init.sh ---
if [[ -z "${__SRC__Volumes_enigmadev_enigmadev_static_maiass_whole_bashmaiass_lib_core_init_sh:-}" ]]; then __SRC__Volumes_enigmadev_enigmadev_static_maiass_whole_bashmaiass_lib_core_init_sh=1

export total_tokens=''
export completion_tokens=''
export prompt_tokens=''
export version_primary_file="${MAIASS_VERSION_PRIMARY_FILE:-}"
export version_primary_type="${MAIASS_VERSION_PRIMARY_TYPE:-}"
export version_primary_line_start="${MAIASS_VERSION_PRIMARY_LINE_START:-}"
export version_secondary_files="${MAIASS_VERSION_SECONDARY_FILES:-}"

# Function to load MAIASS_* variables from .env files
load_bumpscript_env() {
  local env_file=".env.maiass"

  if [[ -f "$env_file" ]]; then
    print_debug "Loading MAIASS_* variables from $env_file"

    while IFS= read -r line || [[ -n "$line" ]]; do
      # Trim leading/trailing whitespace
      line="${line#"${line%%[![:space:]]*}"}"
      line="${line%"${line##*[![:space:]]}"}"

      # Skip blank lines and comments
      [[ -z "$line" || "$line" == \#* ]] && continue

      # Only process MAIASS_* assignments
      if [[ "$line" =~ ^MAIASS_ ]]; then
        local key="${line%%=*}"
        local value="${line#*=}"

        # Strip surrounding matching quotes with POSIX-safe cut
        if [[ "$value" == \"*\" && "$value" == *\" ]] || [[ "$value" == \'*\' && "$value" == *\' ]]; then
          value=$(echo "$value" | cut -c2- | rev | cut -c2- | rev)
        fi

        export "$key=$value"
        print_info "Set $key=$value"
      fi
    done < "$env_file"
  fi
}

# Function to set up branch and changelog variables with override logic
setup_bumpscript_variables() {

      # Initialize debug mode early so it's available throughout the script
      export debug_mode="${MAIASS_DEBUG:=false}"
      export autopush_commits="${MAIASS_AUTOPUSH_COMMITS:=false}"
      export brand="${MAIASS_BRAND:=MAIASS}"
      # Initialize brevity and logging configuration - set debug for testing
      export verbosity_level="${MAIASS_VERBOSITY:=brief}"
      export enable_logging="${MAIASS_LOGGING:=true}"
      export log_file="${MAIASS_LOG_FILE:=maiass.log}"
      export credit='nugét'
      export hidegit="${MAIASS_HIDEGIT:=true}"

      # Initialize AI variables early so they're available when get_commit_message is called
      export ai_invalid_token_choices="${MAIASS_AI_INVALID_TOKEN_CHOICES:-false}"
      export ai_mode="${MAIASS_AI_MODE:-ask}"
      print_debug "DEBUG INIT: First ai_mode assignment - MAIASS_AI_MODE='${MAIASS_AI_MODE:-}', ai_mode='$ai_mode'"
      export ai_token="${MAIASS_AI_TOKEN:-}"
      export ai_model="${MAIASS_AI_MODEL:=gpt-4}"
      export ai_temperature="${MAIASS_AI_TEMPERATURE:=0.8}"
      export ai_max_characters="${MAIASS_AI_MAX_CHARACTERS:=8000}"
      export ai_commit_message_style="${MAIASS_AI_COMMIT_MESSAGE_STYLE:=bullet}"
      export maiass_host="${MAIASS_AI_HOST:-https://pound.maiass.net}"
      export maiass_endpoint="${maiass_host}/v1/chat/completions"
      export maiass_tokenrequest="${maiass_host}/v1/token"
      export maiass_validate_endpoint="${maiass_host}/v1/validate"
      # Legacy endpoints - proxy should provide payment URLs dynamically with subscription_id
      export maiass_register_endpoint="${MAIASS_REGISTER_ENDPOINT:-https://maiass.net/register}"
      export maiass_topup_endpoint="${MAIASS_TOPUP_ENDPOINT:-https://maiass.net/top-up}"

      # Client identity/version for proxy min-version enforcement
      export client_name="${MAIASS_CLIENT_NAME:-bashmaiass}"
      export client_version="${MAIASS_CLIENT_VERSION:-0.0.0}"

      # Initialize configurable version file system
      export version_primary_file="${MAIASS_VERSION_PRIMARY_FILE:-}"
      export version_primary_type="${MAIASS_VERSION_PRIMARY_TYPE:-}"
      export version_primary_line_start="${MAIASS_VERSION_PRIMARY_LINE_START:-}"
      export version_secondary_files="${MAIASS_VERSION_SECONDARY_FILES:-}"

  # Initialize branch names with MAIASS_* overrides

  # Branch name defaults with MAIASS_* overrides
  export developbranch="${MAIASS_DEVELOPBRANCH:-develop}"
  export stagingbranch="${MAIASS_STAGINGBRANCH:-staging}"
  export mainbranch="${MAIASS_MAINBRANCH:-main}"

  # Changelog defaults with MAIASS_* overrides
  export changelog_path="${MAIASS_CHANGELOG_PATH:-.}"
  export changelog_name="${MAIASS_CHANGELOG_NAME:-CHANGELOG.md}"
  export changelog_internal_name="${MAIASS_CHANGELOG_INTERNAL_NAME:-.CHANGELOG_internal.md}"

  # Repository type (for future multi-repo support)
  export repo_type="${MAIASS_REPO_TYPE:-bespoke}"

  # Path configuration based on repository type
  case "$repo_type" in
    "wordpress-theme")
      # WordPress theme: repo root is the theme directory
      export version_file_path="${MAIASS_VERSION_PATH:-.}"
      export package_json_path="${MAIASS_PACKAGE_PATH:-.}"
      export wordpress_files_path="${MAIASS_WP_FILES_PATH:-.}"
      ;;
    "wordpress-plugin")
      # WordPress plugin: repo root is the plugin directory
      export version_file_path="${MAIASS_VERSION_PATH:-.}"
      export package_json_path="${MAIASS_PACKAGE_PATH:-.}"
      export wordpress_files_path="${MAIASS_WP_FILES_PATH:-.}"
      ;;
    "wordpress-site")
      # WordPress site: theme/plugin in subdirectory
      export version_file_path="${MAIASS_VERSION_PATH:-wp-content/themes/active-theme}"
      export package_json_path="${MAIASS_PACKAGE_PATH:-wp-content/themes/active-theme}"
      export wordpress_files_path="${MAIASS_WP_FILES_PATH:-wp-content/themes/active-theme}"
      ;;
    "craft")
      # Craft CMS: typically repo root
      export version_file_path="${MAIASS_VERSION_PATH:-.}"
      export package_json_path="${MAIASS_PACKAGE_PATH:-.}"
      export wordpress_files_path=""  # Not applicable for Craft
      ;;
    "bespoke")
      # Bespoke/custom apps: typically repo root
      export version_file_path="${MAIASS_VERSION_PATH:-.}"
      export package_json_path="${MAIASS_PACKAGE_PATH:-.}"
      export wordpress_files_path=""  # Not applicable for bespoke
      ;;
    *)
      # Default fallback
      export version_file_path="${MAIASS_VERSION_PATH:-.}"
      export package_json_path="${MAIASS_PACKAGE_PATH:-.}"
      export wordpress_files_path="${MAIASS_WP_FILES_PATH:-}"
      ;;
  esac

  print_debug "Branch configuration:" 
  print_debug "  Develop: $developbranch"
  print_debug "  Staging: $stagingbranch"
  print_debug "  Main: $mainbranch"

  print_debug "Changelog configuration:"
  print_debug "  Path: $changelog_path"
  print_debug "  Main changelog: $changelog_name"
  print_debug "  Internal changelog: $changelog_internal_name"

  # Pull request configuration
  export staging_pullrequests="${MAIASS_STAGING_PULLREQUESTS:-on}"
  export main_pullrequests="${MAIASS_MAIN_PULLREQUESTS:-on}"

  # Auto-detect repository provider (GitHub/Bitbucket) and extract repo info from git remote
  local git_remote_url
  git_remote_url=$(git remote get-url origin 2>/dev/null || echo "")

  # Initialize repository variables
  export REPO_PROVIDER="${MAIASS_REPO_PROVIDER:-}"
  export BITBUCKET_WORKSPACE="${MAIASS_BITBUCKET_WORKSPACE:-}"
  export BITBUCKET_REPO_SLUG="${MAIASS_BITBUCKET_REPO_SLUG:-}"
  export GITHUB_OWNER="${MAIASS_GITHUB_OWNER:-}"
  export GITHUB_REPO="${MAIASS_GITHUB_REPO:-}"

  # Detect Bitbucket
resolved_host=$(ssh -G "${git_remote_url#*@}" 2>/dev/null | awk '/^hostname / { print $2 }')
if [[ "$git_remote_url" =~ @(.*bitbucket\.org)[:/]([^/]+)/([^/\.]+) ]]; then
  export REPO_PROVIDER="bitbucket"
  export BITBUCKET_WORKSPACE="${MAIASS_BITBUCKET_WORKSPACE:-${BASH_REMATCH[2]}}"
  export client=
elif [[ "$git_remote_url" =~ @(.*github\.com)[:/]([^/]+)/([^/\.]+) ]]; then
  export REPO_PROVIDER="github"
  export GITHUB_OWNER="${MAIASS_GITHUB_OWNER:-${BASH_REMATCH[2]}}"
  export GITHUB_REPO="${MAIASS_GITHUB_REPO:-${BASH_REMATCH[3]}}"
fi

  # Calculate WordPress version constant for themes/plugins
  if [[ "$repo_type" == "wordpress-theme" || "$repo_type" == "wordpress-plugin" ]]; then
    if [[ -n "$wordpress_files_path" ]]; then
      # Use the folder name (basename of the wordpress_files_path)
      local folder_name
      folder_name=$(basename "$wordpress_files_path")

      if [[ -n "$folder_name" && "$folder_name" != "." ]]; then
        # Convert folder name to constant format: uppercase, replace dashes with underscores
        local wp_constant
        wp_constant=$(echo "$folder_name" | tr '[:lower:]' '[:upper:]' | sed 's/-/_/g')
        export wpVersionConstant="${MAIASS_WP_VERSION_CONSTANT:-${wp_constant}_RELEASE_VERSION}"
      else
        # If wordpress_files_path is ".", use the current directory name
        local current_dir
        current_dir=$(basename "$(pwd)")
        local wp_constant
        wp_constant=$(echo "$current_dir" | tr '[:lower:]' '[:upper:]' | sed 's/-/_/g')
        export wpVersionConstant="${MAIASS_WP_VERSION_CONSTANT:-${wp_constant}_RELEASE_VERSION}"
      fi
    else
      export wpVersionConstant="${MAIASS_WP_VERSION_CONSTANT:-}"
    fi
  else
    export wpVersionConstant="${MAIASS_WP_VERSION_CONSTANT:-}"
  fi

  print_debug "Repository type: $repo_type"
  print_debug "Path configuration:"
  print_debug "  Version file: $version_file_path"
  print_debug "  Package.json: $package_json_path"
  if [[ -n "$wordpress_files_path" ]]; then
    print_debug "  WordPress files: $wordpress_files_path"
  fi

  # AI commit message configuration - Don't override if already set
  print_debug "DEBUG INIT: Before second assignment - MAIASS_AI_MODE='${MAIASS_AI_MODE:-}', current ai_mode='$ai_mode'"
  if [[ -z "$ai_mode" ]]; then
    export ai_mode="${MAIASS_AI_MODE:-ask}"
    print_debug "DEBUG INIT: ai_mode was empty, setting to: '$ai_mode'"
  else
    print_debug "DEBUG INIT: ai_mode already set to: '$ai_mode', keeping it"
  fi
  
  export ai_token="${MAIASS_AI_TOKEN:-}"
  print_debug "DEBUG INIT: ai_token length=${#ai_token}"
  export ai_model="${MAIASS_AI_MODEL:-gpt-3.5-turbo}"

  # Determine the AI commit message style
  if [[ -n "$MAIASS_AI_COMMIT_MESSAGE_STYLE" ]]; then
    ai_commit_style="$MAIASS_AI_COMMIT_MESSAGE_STYLE"
    print_debug "Using AI commit style from .env: $ai_commit_style"
  elif [[ -f ".maiass.prompt" ]]; then
    ai_commit_style="custom"
    print_debug "No style set in .env; using local prompt file: .maiass.prompt"
  elif [[ -f "$HOME/.maiass.prompt" ]]; then
    ai_commit_style="global_custom"
    print_debug "No style set in .env; using global prompt file: ~/.maiass.prompt"
  else
    ai_commit_style="bullet"
    print_debug "No style or prompt files found; defaulting to 'bullet'"
  fi

  export ai_commit_style

  export debug_mode="${MAIASS_DEBUG:-false}"

  # Validate AI configuration - prevent ask/autosuggest modes without token
  print_debug "DEBUG INIT: AI mode set to '$ai_mode' - token validation will happen when AI features are used"
  
  print_debug "DEBUG INIT: Final ai_mode='$ai_mode'"

  print_debug "Integration configuration:"
  print_debug "  Staging pull requests: $staging_pullrequests"
  print_debug "  Main pull requests: $main_pullrequests"
  print_debug "  AI commit messages: $ai_mode"
  if [[ "$ai_mode" != "off" && -n "$ai_token" ]]; then
    print_debug "  AI model: $ai_model"
    print_debug "  AI temperature: $ai_temperature"
    print_debug "  AI Max commit characters: $ai_max_characters"
    print_debug "  AI commit style: $ai_commit_style"
  fi
  if [[ "$REPO_PROVIDER" == "bitbucket" && -n "$BITBUCKET_WORKSPACE" ]]; then
    print_debug "  Repository: Bitbucket ($BITBUCKET_WORKSPACE/$BITBUCKET_REPO_SLUG)"
    export client="$BITBUCKET_WORKSPACE"
    export project="$BITBUCKET_REPO_SLUG"
  elif [[ "$REPO_PROVIDER" == "github" && -n "$GITHUB_OWNER" ]]; then
    print_debug "  Repository: GitHub ($GITHUB_OWNER/$GITHUB_REPO)"
    export client="$GITHUB_OWNER"
    export project="$GITHUB_REPO"
  fi
  if [[ -n "$wpVersionConstant" ]]; then
    print_debug "  WordPress version constant: $wpVersionConstant"
  fi
}

fi # __SRC__Volumes_enigmadev_enigmadev_static_maiass_whole_bashmaiass_lib_core_init_sh
# --- End inlined: /Volumes/enigmadev/enigmadev/static/maiass-whole/bashmaiass/lib/core/init.sh ---

# --- Begin inlined: /Volumes/enigmadev/enigmadev/static/maiass-whole/bashmaiass/lib/core/version.sh ---
if [[ -z "${__SRC__Volumes_enigmadev_enigmadev_static_maiass_whole_bashmaiass_lib_core_version_sh:-}" ]]; then __SRC__Volumes_enigmadev_enigmadev_static_maiass_whole_bashmaiass_lib_core_version_sh=1

# sets value to $currentversion and newversion.
# usage: getVersion [major|minor|patch|specific_version]
# if the second argument is not set, bumps the patch version

# Helper function to read version from a file based on type and line start
read_version_from_file() {
    local file="$1"
    local file_type="$2"
    local line_start="$3"
    local version=""

    if [[ ! -f "$file" ]]; then
        return 1
    fi

    case "$file_type" in
        "json")
            # JSON file - look for "version" property
            if command -v jq >/dev/null 2>&1; then
                version=$(jq -r '.version' "$file" 2>/dev/null)
            else
                # Fallback method using grep and sed
                version=$(grep '"version"' "$file" | head -1 | sed 's/.*"version"[[:space:]]*:[[:space:]]*"\([^"]*\)".*/\1/')
            fi
            ;;
        "txt")
            # Text file - look for line starting with specified prefix
            if [[ -n "$line_start" ]]; then
                version=$(grep "^${line_start}" "$file" | head -1 | sed "s/^${line_start}//" | sed 's/^[[:space:]]*//' | sed 's/[[:space:]]*$//')
            else
                # If no line start specified, assume entire file content is the version
                version=$(cat "$file" | tr -d '\n\r')
            fi
            ;;
        "pattern")
            # Pattern-based matching - extract version from regex pattern
            # line_start contains the pattern with {version} placeholder
            if [[ -n "$line_start" ]]; then
                # For PHP define statements, extract the version directly
                if [[ "$line_start" == *"define("* ]]; then
                    # Extract constant name from pattern
                    local const_name
                    const_name=$(echo "$line_start" | sed "s/.*define('\([^']*\)'.*/\1/" | sed "s/.*define(\"\([^\"]*\)\".*/\1/")
                    if [[ -n "$const_name" ]]; then
                        # Find the define line and extract version
                        version=$(grep "define('${const_name}'" "$file" | sed "s/.*'[^']*'[[:space:]]*,[[:space:]]*'\([^']*\)'.*/\1/")
                        if [[ -z "$version" ]]; then
                            version=$(grep "define(\"${const_name}\"" "$file" | sed "s/.*\"[^\"]*\"[[:space:]]*,[[:space:]]*\"\([^\"]*\)\".*/\1/")
                        fi
                    fi
                else
                    # Generic pattern matching - replace {version} with capture group
                    local search_pattern
                    search_pattern=$(echo "$line_start" | sed "s/{version}/\\([^'\"]*\\)/g")
                    version=$(sed -n "s/.*${search_pattern}.*/\1/p" "$file" | head -1)
                fi
            fi
            ;;
        *)
            print_error "Unsupported file type: $file_type"
            return 1
            ;;
    esac

    if [[ -n "$version" && "$version" != "null" ]]; then
        echo "$version"
        return 0
    else
        return 1
    fi
}

# Helper function to update version in a file based on type and line start
update_version_in_file() {
    local file="$1"
    local file_type="$2"
    local line_start="$3"
    local new_version="$4"

    if [[ ! -f "$file" ]]; then
        print_warning "File not found: $file"
        return 1
    fi

    case "$file_type" in
        "json")
            # JSON file - update "version" property
            if command -v jq >/dev/null 2>&1; then
                jq ".version = \"$new_version\"" "$file" > "${file}.tmp" && mv "${file}.tmp" "$file"
            else
                # Fallback to sed
                sed_inplace "s/\"version\": \".*\"/\"version\": \"$new_version\"/" "$file"
            fi
            ;;
        "txt")
            # Text file - update line starting with specified prefix
            if [[ -n "$line_start" ]]; then

                awk -v prefix="$line_start" -v version="$new_version" '
                  BEGIN { len = length(prefix) }
                  substr($0, 1, len) == prefix { print prefix version; next }
                  { print }
                ' "$file" > "${file}.tmp" && mv "${file}.tmp" "$file"
            else
                # If no line start specified, replace entire file content
                echo "$new_version" > "$file"
            fi
            ;;
        "pattern")
            # Pattern-based replacement - replace version in regex pattern
            # line_start contains the pattern with {version} placeholder
            if [[ -n "$line_start" ]]; then
                # For PHP define statements, use a specific approach
                if [[ "$line_start" == *"define("* ]]; then
                    # Extract the constant name from the pattern
                    local const_name
                    const_name=$(echo "$line_start" | sed "s/.*define('\([^']*\)'.*/\1/" | sed "s/.*define(\"\([^\"]*\)\".*/\1/")
                    if [[ -n "$const_name" ]]; then
                        # Replace PHP define statement with new version
                        sed_inplace "s/define('${const_name}'[[:space:]]*,[[:space:]]*'[^']*')/define('${const_name}','${new_version}')/g" "$file"
                        sed_inplace "s/define(\"${const_name}\"[[:space:]]*,[[:space:]]*\"[^\"]*\")/define(\"${const_name}\",\"${new_version}\")/g" "$file"
                    fi
                else
                    # Generic pattern replacement - replace {version} with new version
                    local replacement_text
                    replacement_text=$(echo "$line_start" | sed "s/{version}/$new_version/g")
                    # Create a pattern to match the structure (replace {version} with wildcard)
                    local match_pattern
                    match_pattern=$(echo "$line_start" | sed "s/{version}/.*/g" | sed 's/[[\/.\*^$()+?{|]/\\&/g')
                    # Replace matching lines
                    sed_inplace "s/${match_pattern}/${replacement_text}/g" "$file"
                fi
            fi
            ;;
        *)
            print_error "Unsupported file type: $file_type"
            return 1
            ;;
    esac

    return 0
}

# Helper function to parse secondary version files configuration
parse_secondary_version_files() {
    local config="$1"
    local -a files_array

    if [[ -z "$config" ]]; then
        return 0
    fi

    IFS='|' read -ra files_array <<< "$config"

    for file_config in "${files_array[@]}"; do
        if [[ -n "$file_config" ]]; then
            IFS=':' read -ra config_parts <<< "$file_config"
            local file="${config_parts[0]}"
            local type="${config_parts[1]:-txt}"
            local line_start="${config_parts[2]:-}"

            if [[ -f "$file" ]]; then
                echo "$file:$type:$line_start"
            else
                echo "Skipping $file (not found)" >&2
            fi
        fi
    done
}

# Compare two semantic version strings
# Returns 0 (true) if version1 > version2, 1 (false) otherwise
version_is_greater() {
    local version1="$1"
    local version2="$2"

    # Split versions into major.minor.patch components
    local v1_major
    local v1_minor
    local v1_patch
    local v2_major
    local v2_minor
    local v2_patch

    v1_major=$(echo "$version1" | cut -d. -f1)
    v1_minor=$(echo "$version1" | cut -d. -f2)
    v1_patch=$(echo "$version1" | cut -d. -f3)

    v2_major=$(echo "$version2" | cut -d. -f1)
    v2_minor=$(echo "$version2" | cut -d. -f2)
    v2_patch=$(echo "$version2" | cut -d. -f3)

    # Compare major version
    if [ "$v1_major" -gt "$v2_major" ]; then
        return 0  # version1 > version2
    elif [ "$v1_major" -lt "$v2_major" ]; then
        return 1  # version1 < version2
    fi

    # Major versions are equal, compare minor version
    if [ "$v1_minor" -gt "$v2_minor" ]; then
        return 0  # version1 > version2
    elif [ "$v1_minor" -lt "$v2_minor" ]; then
        return 1  # version1 < version2
    fi

    # Major and minor versions are equal, compare patch version
    if [ "$v1_patch" -gt "$v2_patch" ]; then
        return 0  # version1 > version2
    else
        return 1  # version1 <= version2
    fi
}

function getVersion(){
# ---------------------------------------------------------------
# Copyright (c) 2025 Velvary Pty Ltd
# All rights reserved.
# This function is part of the Velvary bash scripts library.
# Licensed under the End User License Agreement (eula.txt) provided with this software.
# ---------------------------------------------------------------
    local version_arg="$1"  # major, minor, patch, or specific version

    # Initialize global variables (compatible with older bash versions)
    version_source=""
    version_source_file=""
    version_source_type=""
    version_source_line_start=""
    currentversion=""
    newversion=""

    print_debug "Determining Version Source"

    # Check for custom primary version file first
    if [[ -n "$version_primary_file" && -n "$version_primary_type" ]]; then
        print_debug "Checking custom primary version file: $version_primary_file"
        if currentversion=$(read_version_from_file "$version_primary_file" "$version_primary_type" "$version_primary_line_start"); then
            print_debug "Found custom primary version file: $version_primary_file - using as version source"
            version_source="custom_primary"
            version_source_file="$version_primary_file"
            version_source_type="$version_primary_type"
            version_source_line_start="$version_primary_line_start"
        else
            print_error "Could not read version from custom primary file: $version_primary_file"
            return 1
        fi
    # Fallback to package.json (legacy behavior)
    elif [ -f "${package_json_path}/package.json" ]; then
        local package_json_file="${package_json_path}/package.json"
        print_debug "Found package.json at $package_json_file - using as version source"
        version_source="package.json"
        version_source_file="$package_json_file"
        version_source_type="json"
        version_source_line_start=""

        if currentversion=$(read_version_from_file "$package_json_file" "json" ""); then
            : # Success, currentversion is set
        else
            print_error "Could not read version from package.json. Exiting."
            return 1
        fi
    # Fallback to VERSION file (legacy behavior)
    elif [ -f "$version_file_path/VERSION" ]; then
        print_info "No package.json found - using VERSION file at $version_file_path/VERSION"
        version_source="VERSION"
        version_source_file="$version_file_path/VERSION"
        version_source_type="txt"
        version_source_line_start=""

        if currentversion=$(read_version_from_file "$version_file_path/VERSION" "txt" ""); then
            : # Success, currentversion is set
        else
            print_error "VERSION file is empty. Exiting."
            return 1
        fi
    else
        print_error "No version source found! Please create either:"
        if [[ -n "$version_primary_file" ]]; then
            print_error "  - Custom primary version file: $version_primary_file, or"
        fi
        print_error "  - package.json at $package_json_path/package.json with version field, or"
        print_error "  - VERSION file at $version_file_path/VERSION"
        return 1
    fi

    # Calculate new version based on argument
    if [ -z "$version_arg" ]; then
       print_info "No version specified, bumping patch version..."
       newversion=$(echo "$currentversion" | awk -F. '{$NF = $NF + 1;} 1' | sed 's/ /./g')
    else
        print_info "Setting version based on argument: $version_arg"
        if [ "$version_arg" == "major" ]; then
            newversion=$(echo "$currentversion" | awk -F. '{$1 = $1 + 1; $2 = 0; $3 = 0;} 1' | sed 's/ /./g')
        elif [ "$version_arg" == "minor" ]; then
            newversion=$(echo "$currentversion" | awk -F. '{$2 = $2 + 1; $3 = 0;} 1' | sed 's/ /./g')
        elif [ "$version_arg" == "patch" ]; then
            newversion=$(echo "$currentversion" | awk -F. '{$3 = $3 + 1;} 1' | sed 's/ /./g')
        else
            # Validate specific version format (X.Y.Z)
            if [[ ! "$version_arg" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
                print_error "Invalid version format: $version_arg"
                print_error "Version must be in major.minor.patch format (e.g., 1.2.3)"
                return 1
            fi

            # Get latest version from git tags for comparison
            local latest_tag_version
            latest_tag_version=$(get_latest_version_from_tags)

            if [[ -n "$latest_tag_version" ]]; then
                print_info "Latest git tag version: $latest_tag_version"
                # Check if new version is greater than latest tag
                if ! version_is_greater "$version_arg" "$latest_tag_version"; then
                    print_error "Version $version_arg is lower than latest version $latest_tag_version"
                    echo "Would you like to:"
                    echo "1) Bump the patch version (${latest_tag_version} → $(echo "$latest_tag_version" | awk -F. '{$3 = $3 + 1;} 1' | sed 's/ /./g'))"
                    echo "2) Try entering another version number"
                    echo "3) Exit (default)"
                    read -p "$(echo -e ${BCyan}Enter choice [1/2/3]: ${Color_Off})" choice

                    case "$choice" in
                        1)
                            newversion=$(echo "$latest_tag_version" | awk -F. '{$3 = $3 + 1;} 1' | sed 's/ /./g')
                            print_success "Using patch bump: $newversion"
                            ;;
                        2)
                            read -p "$(echo -e ${BCyan}Enter new version: ${Color_Off})" new_input
                            if [[ -n "$new_input" ]]; then
                                # Recursively call getVersion with new input
                                getVersion "$new_input"
                                return $?
                            else
                                print_error "No version entered. Exiting."
                                return 1
                            fi
                            ;;
                        *)
                            print_error "Exiting."
                            return 1
                            ;;
                    esac
                fi
            else
                # No git tags exist yet - this is the first version tag
                print_info "No version tags found in repository"
                print_info "This will be the first version tag: $version_arg"
                # Compare against current version in file to ensure we're not going backwards
                if ! version_is_greater "$version_arg" "$currentversion"; then
                    print_warning "Specified version $version_arg is not greater than current file version $currentversion"
                    echo "Would you like to:"
                    echo "1) Use current file version and bump patch (${currentversion} → $(echo "$currentversion" | awk -F. '{$3 = $3 + 1;} 1' | sed 's/ /./g'))"
                    echo "2) Try entering another version number"
                    echo "3) Continue with $version_arg anyway"
                    echo "4) Exit (default)"
                    read -p "$(echo -e ${BCyan}Enter choice [1/2/3/4]: ${Color_Off})" choice

                    case "$choice" in
                        1)
                            newversion=$(echo "$currentversion" | awk -F. '{$3 = $3 + 1;} 1' | sed 's/ /./g')
                            print_success "Using file version patch bump: $newversion"
                            ;;
                        2)
                            read -p "$(echo -e ${BCyan}Enter new version: ${Color_Off})" new_input
                            if [[ -n "$new_input" ]]; then
                                # Recursively call getVersion with new input
                                getVersion "$new_input"
                                return $?
                            else
                                print_error "No version entered. Exiting."
                                return 1
                            fi
                            ;;
                        3)
                            print_info "Continuing with version $version_arg"
                            newversion="$version_arg"
                            ;;
                        *)
                            print_info "Exiting."
                            return 1
                            ;;
                    esac
                else
                    newversion="$version_arg"
                fi
            fi
        fi
    fi

    print_info "Version source: ${BWhite}$version_source${Color_Off}"
    print_info "Current version: ${BWhite}$currentversion${Color_Off}"
    print_success "New version: ${BWhite}$newversion${Color_Off}"
}

function bumpVersion() {
    # if $newversion is not set, exit with an error
    if [ -z "$newversion" ]; then
        print_error "No new version set. Exiting."
        exit 1
    fi

    # if $version_source is not set, exit with an error
    if [ -z "$version_source" ]; then
        print_error "No version source determined. Please run getVersion first. Exiting."
        exit 1
    fi

    print_debug "Updating Version Numbers"

    # Update the primary version source first
    if [ "$version_source" = "custom_primary" ]; then
        print_info "Updating custom primary version source: $version_source_file..."
        was_executable=$(test -x "$version_source_file" && echo "yes" || echo "no")

        if update_version_in_file "$version_source_file" "$version_source_type" "$version_source_line_start" "$newversion"; then
            if [[ "$was_executable" == "yes" ]]; then
                chmod +x "$version_source_file"
                print_info "Restored +x on $version_source_file"
            fi
            print_success "Updated version to $newversion in $version_source_file"
        else
            print_error "Failed to update version in $version_source_file"
            exit 1
        fi
    elif [ "$version_source" = "package.json" ]; then
        print_info "Updating primary version source: package.json..."
        local package_json_file="${package_json_path}/package.json"
        if update_version_in_file "$package_json_file" "json" "" "$newversion"; then
            print_success "Updated version to $newversion in package.json"
        else
            print_error "Failed to update version in package.json"
            exit 1
        fi

        # Also update VERSION file if it exists (for compatibility)
        if [ -f "$version_file_path/VERSION" ]; then
            print_info "Updating VERSION file for compatibility..."
            if update_version_in_file "$version_file_path/VERSION" "txt" "" "$newversion"; then
                print_success "Updated version to $newversion in VERSION file"
            fi
        fi
    else
        # VERSION file is the primary source
        print_info "Updating primary version source: VERSION file..."
        if update_version_in_file "$version_file_path/VERSION" "txt" "" "$newversion"; then
            print_success "Updated version to $newversion in VERSION file"
        else
            print_error "Failed to update version in VERSION file"
            exit 1
        fi

        # Also update package.json if it exists (for compatibility)
        local package_json_file="${package_json_path}/package.json"
        if [ -f "$package_json_file" ]; then
            print_info "Updating package.json for compatibility..."
            if update_version_in_file "$package_json_file" "json" "" "$newversion"; then
                print_success "Updated version to $newversion in package.json"
            fi
        fi
    fi

    # Update secondary version files if configured
    if [[ -n "$version_secondary_files" ]]; then
        print_info "Updating secondary version files..."
        while IFS= read -r file_config; do
            if [[ -n "$file_config" ]]; then
                IFS=':' read -ra config_parts <<< "$file_config"
                local sec_file="${config_parts[0]}"
                local sec_type="${config_parts[1]:-txt}"
                local sec_line_start="${config_parts[2]:-}"
                # Track which files were executable before
                was_executable=$(test -x "$sec_file" && echo "yes" || echo "no")
                print_info "Updating $sec_file, as $sec_type" "debug"

                if update_version_in_file "$sec_file" "$sec_type" "$sec_line_start" "$newversion"; then
                    if [[ "$was_executable" == "yes" ]]; then
                        chmod +x "$sec_file"
                        print_info "Restored +x on $sec_file"
                    fi
                    print_success "Updated version to $newversion in $sec_file"
                else
                    print_warning "Failed to update version in $sec_file"
                fi
            fi
        done <<< "$(parse_secondary_version_files "$version_secondary_files")"
    fi

    # Update WordPress files if applicable (legacy support)
    if [[ -n "$wordpress_files_path" ]]; then
        if sed_inplace "s/Version: .*/Version: $newversion/" "$wordpress_files_path/style.css"; then
            print_success "Updated version in style.css"
        fi

        if sed_inplace "s/^define.*.$wpVersionConstant.*/define('$wpVersionConstant','$newversion');/" "$wordpress_files_path/functions.php"; then
            print_success "Updated version in functions.php"
        fi
    fi
}

fi # __SRC__Volumes_enigmadev_enigmadev_static_maiass_whole_bashmaiass_lib_core_version_sh
# --- End inlined: /Volumes/enigmadev/enigmadev/static/maiass-whole/bashmaiass/lib/core/version.sh ---

# --- Begin inlined: /Volumes/enigmadev/enigmadev/static/maiass-whole/bashmaiass/lib/core/logger.sh ---
if [[ -z "${__SRC__Volumes_enigmadev_enigmadev_static_maiass_whole_bashmaiass_lib_core_logger_sh:-}" ]]; then __SRC__Volumes_enigmadev_enigmadev_static_maiass_whole_bashmaiass_lib_core_logger_sh=1

fi # __SRC__Volumes_enigmadev_enigmadev_static_maiass_whole_bashmaiass_lib_core_logger_sh
# --- End inlined: /Volumes/enigmadev/enigmadev/static/maiass-whole/bashmaiass/lib/core/logger.sh ---

# --- Begin inlined: /Volumes/enigmadev/enigmadev/static/maiass-whole/bashmaiass/lib/utils/helpers.sh ---
if [[ -z "${__SRC__Volumes_enigmadev_enigmadev_static_maiass_whole_bashmaiass_lib_utils_helpers_sh:-}" ]]; then __SRC__Volumes_enigmadev_enigmadev_static_maiass_whole_bashmaiass_lib_utils_helpers_sh=1

# Cross-platform sed -i helper function with file existence check
# Usage: sed_inplace 'pattern' file
# Returns 0 if successful, 1 if file doesn't exist (non-fatal)
sed_inplace() {
    local pattern="$1"
    local file="$2"

    # Check if file exists - return silently if not (expected for diverse repos)
    if [ ! -f "$file" ]; then
        return 1
    fi

    if sed --version >/dev/null 2>&1; then
        # GNU sed (Linux)
        sed -i "$pattern" "$file"
    else
        # BSD sed (macOS)
        sed -i '' "$pattern" "$file"
    fi
}

open_url() {
  local url="$1"
  # if MAIASS_BROWSER is empty, use the default browser
  if [ -z "$MAIASS_BROWSER" ]; then
    open "$url"
    return
  fi

  # Set defaults if variables are unset
  local browser="${MAIASS_BROWSER:-Google Chrome}"
  local profile="${MAIASS_BROWSER_PROFILE:-Default}"

  # Map known browser names to their app paths and binary paths
  local app_path=""
  local binary_path=""

  case "$browser" in
    "Brave Browser")
      app_path="/Applications/Google Chrome.app"
      binary_path="$app_path/Contents/MacOS/Brave Browser"
      ;;
    "Google Chrome")
      app_path="/Applications/Google Chrome.app"
      binary_path="$app_path/Contents/MacOS/Google Chrome"
      ;;
    "Firefox")
      app_path="/Applications/Firefox.app"
      binary_path="$app_path/Contents/MacOS/firefox"
      ;;
    "Scribe")
      app_path="/Applications/Scribe.app"
      binary_path="$app_path/Contents/MacOS/Scribe"
      ;;
    "Safari")
      open -a "Safari" "$url"
      return
      ;;
    *)
      echo "Unsupported browser: $browser"
      return 1
      ;;
  esac

  # For browsers that support profiles via CLI
  if [[ "$browser" == "Firefox" ]]; then
    "$binary_path" -P "$profile" -no-remote "$url" &
  else
    "$binary_path" --profile-directory="$profile" "$url" &
  fi
}

# Generate sign-off message with optional top-up URL
print_signoff_with_topup() {
  echo ""
  print_info "${BGreen}✅ Done!${Color_Off} ${Aqua}You are on ${BWhite}$branch_name${Aqua} branch" "brief"
  # Read session data from temp file if it exists
  local credits_used credits_remaining ai_warnings ai_model
  if [[ -f "/tmp/maiass_session_data.tmp" ]]; then
    # Source the file to get variables
    while IFS='=' read -r key value; do
      case "$key" in
        "CREDITS_USED") credits_used="$value" ;;
        "CREDITS_REMAINING") credits_remaining="$value" ;;
        "AI_MODEL") ai_model="$value" ;;
      esac
    done < /tmp/maiass_session_data.tmp
    
    # Read AI warnings (handle multiline)
    if grep -q "AI_WARNINGS<<EOF" /tmp/maiass_session_data.tmp; then
      ai_warnings=$(sed -n '/AI_WARNINGS<<EOF/,/EOF/p' /tmp/maiass_session_data.tmp | sed '1d;$d')
    fi
  fi
  
  # Display credit summary if available from AI operations
  if [[ -n "$credits_used" || -n "$credits_remaining" ]]; then
    echo "📊 Credit Summary:"
    if [[ -n "$credits_used" ]]; then
      if [[ -n "$ai_model" ]]; then
        echo -e "   Credits used this session: ${SoftPink}$credits_used${Color_Off} ($ai_model)"
      else
        echo -e "   Credits used this session: ${SoftPink}$credits_used${Color_Off}"
      fi
    fi
    if [[ -n "$credits_remaining" ]]; then
        print_credit_color $credits_remaining "Credits remaining: $credits_remaining"
    fi
  fi
  
  # Display AI warning messages if any
  if [[ -n "$ai_warnings" ]]; then
    # echo "⚠️  AI Service Notifications:"
    # Handle multiple warning messages
    while IFS= read -r warning_line; do
      if [[ -n "$warning_line" && "$warning_line" != "empty" && "$warning_line" != "null" ]]; then
        echo "   $warning_line"
      fi
    done <<< "$ai_warnings"
    echo ""
  fi
  # "Thank you for using MAIASS!" with bold yellow and green MAIASS

  print_gradient_line 40
  print_thanks
  print_gradient_line 40
    # Check if we have a stored top-up endpoint from init
  if [[ -n "$MAIASS_SUBSCRIPTION_ID" ]]; then
    echo -e "💳 ${Yellow}Need more credits?"
    echo -e "${BBlue}${maiass_topup_endpoint}/$MAIASS_SUBSCRIPTION_ID${Color_Off}"
  else
   echo -e "💳 ${Yellow}Need more credits?"
   echo -e "${BBlue}${maiass_topup_endpoint}${Color_Off}"
  fi
  
  # Debug: Check topup URL variables
  #print_debug "DEBUG SIGNOFF: maiass_topup_endpoint='${maiass_topup_endpoint:-}'"
  #print_debug "DEBUG SIGNOFF: MAIASS_SUBSCRIPTION_ID='${MAIASS_SUBSCRIPTION_ID:-}'"
  
  # Clean up session data file
  if [[ -f "/tmp/maiass_session_data.tmp" ]]; then
    rm -f /tmp/maiass_session_data.tmp
  fi
}

generate_machine_fingerprint() {
  # Get MAC address
  get_mac_address() {
    if command -v ip &>/dev/null; then
      ip link | awk '/ether/ {print $2; exit}'
    else
      # macOS fallback
      networksetup -listallhardwareports | \
        awk '/Device|Ethernet Address/ {
          if ($1 == "Device:") dev=$2;
          else if ($1 == "Ethernet") {
            print $3;
            exit
          }
        }'
    fi
  }

  # Get CPU info
  get_cpu_info() {
    if [[ "$OSTYPE" == "darwin"* ]]; then
      sysctl -n machdep.cpu.brand_string
    else
      grep -m1 'model name' /proc/cpuinfo | cut -d ':' -f 2 | xargs
    fi
  }

  # Get disk ID or volume UUID
  get_disk_identifier() {
    if [[ "$OSTYPE" == "darwin"* ]]; then
      diskutil info / | awk -F': ' '/Volume UUID/ {print $2; exit}'
    else
      root_disk=$(df / | tail -1 | awk '{print $1}' | sed 's/[0-9]*$//')
      lsblk -no SERIAL "$root_disk" 2>/dev/null || echo "unknown-serial"
    fi
  }

  # Kernel info
  get_kernel_info() {
    uname -srm
  }

  # Hashing helper
  hash_fingerprint() {
    if command -v sha256sum &>/dev/null; then
      sha256sum
    else
      shasum -a 256
    fi
  }

  # Main fingerprint generation
  mac=$(get_mac_address)
  cpu=$(get_cpu_info)
  disk=$(get_disk_identifier)
  kernel=$(get_kernel_info)

  fingerprint_input="${mac}|${cpu}|${disk}|${kernel}"
  echo "$fingerprint_input" | hash_fingerprint | awk '{print $1}'
}

fi # __SRC__Volumes_enigmadev_enigmadev_static_maiass_whole_bashmaiass_lib_utils_helpers_sh
# --- End inlined: /Volumes/enigmadev/enigmadev/static/maiass-whole/bashmaiass/lib/utils/helpers.sh ---

# --- Begin inlined: /Volumes/enigmadev/enigmadev/static/maiass-whole/bashmaiass/lib/core/git.sh ---
if [[ -z "${__SRC__Volumes_enigmadev_enigmadev_static_maiass_whole_bashmaiass_lib_core_git_sh:-}" ]]; then __SRC__Volumes_enigmadev_enigmadev_static_maiass_whole_bashmaiass_lib_core_git_sh=1

# Error handling for git operations
function check_git_success() {
    if [ $? -ne 0 ]; then
        print_error "Git operation failed"
        print_error "Please complete this process manually"
        if git rev-parse --verify HEAD >/dev/null 2>&1; then
            print_info "You are currently on branch: $(git rev-parse --abbrev-ref HEAD)"
        else
            print_info "You are currently on branch: $(git symbolic-ref --short HEAD 2>/dev/null || echo "unknown")"
        fi
        exit 1
    fi
}

# Execute git command with verbosity-controlled output
# Usage: run_git_command "git command" [show_output_level]
# show_output_level: brief, normal, debug (default: normal)
run_git_command() {
    local git_cmd="$1"
    local show_level="${2:-normal}"

    # For backward compatibility, treat debug_mode=true as verbosity_level=debug
    if [[ "$debug_mode" == "true" && "$verbosity_level" != "debug" ]]; then
        # Only log this when not already in debug verbosity to avoid noise
        log_message "DEPRECATED: Using debug_mode=true is deprecated. Please use MAIASS_VERBOSITY=debug instead."
        # Treat as if verbosity_level is debug
        local effective_verbosity="debug"
    else
        local effective_verbosity="$verbosity_level"
    fi

    # If hidegit is enabled, capture output for logging but don't show to user
    if [[ "$hidegit" == "true" ]]; then
        local temp_output
        temp_output=$(eval "$git_cmd" 2>&1)
        local exit_code=$?
        
        # Log the output if logging is enabled
        if [[ "$enable_logging" == "true" && -n "$temp_output" ]]; then
            log_message "GIT OUTPUT: $git_cmd"
            log_message "$temp_output"
        fi
        
        return $exit_code
    fi

    # Control output based on verbosity level (original behavior when hidegit=false)
    case "$effective_verbosity" in
        "brief")
            if [[ "$show_level" == "brief" ]]; then
                eval "$git_cmd"
            else
                eval "$git_cmd" >/dev/null 2>&1
            fi
            ;;
        "normal")
            if [[ "$show_level" == "debug" ]]; then
                eval "$git_cmd" >/dev/null 2>&1
            else
                eval "$git_cmd"
            fi
            ;;
        "debug")
            eval "$git_cmd"
            ;;
    esac

    return $?
}

# Check and handle .gitignore for log files
check_gitignore_for_logs() {
    if [[ "$enable_logging" != "true" ]]; then
        return 0
    fi

    local gitignore_file=".gitignore"
    local log_pattern_found=false

    # Check if .gitignore exists and contains log file patterns
    if [[ -f "$gitignore_file" ]]; then
        # Check for specific log file or *.log pattern
        if grep -q "^${log_file}$" "$gitignore_file" 2>/dev/null || \
           grep -q "^\*.log$" "$gitignore_file" 2>/dev/null || \
           grep -q "^\*\.log$" "$gitignore_file" 2>/dev/null; then
            log_pattern_found=true
        fi
    fi

    # If log file is not ignored, warn user and offer to add it
    if [[ "$log_pattern_found" == "false" ]]; then
        print_warning "Log file '$log_file' is not in .gitignore"
        echo -n "Add '$log_file' to .gitignore to avoid committing log files? [Y/n]: "
        read -r add_to_gitignore

        if [[ "$add_to_gitignore" =~ ^[Nn]$ ]]; then
            print_info "Continuing without adding to .gitignore" "brief"
        else
            # Add log file to .gitignore
            if [[ ! -f "$gitignore_file" ]]; then
                echo "# Log files" > "$gitignore_file"
                echo "$log_file" >> "$gitignore_file"
                print_success "Created .gitignore and added '$log_file'"
            else
                echo "" >> "$gitignore_file"
                echo "# MAIASS log file" >> "$gitignore_file"
                echo "$log_file" >> "$gitignore_file"
                print_success "Added '$log_file' to .gitignore"
            fi
        fi
    fi
}

# Check and handle .gitignore for environment files
check_gitignore_for_env() {
    local gitignore_file=".gitignore"
    local env_pattern_found=false

    # Check if .gitignore exists and contains env file patterns
    if [[ -f "$gitignore_file" ]]; then
        # Check for .env.maiass, .env.maiass*, .env*, or .env.* patterns
        if grep -q "^\.env\.maiass$" "$gitignore_file" 2>/dev/null || \
           grep -q "^\.env\.maiass\*$" "$gitignore_file" 2>/dev/null || \
           grep -q "^\.env\*$" "$gitignore_file" 2>/dev/null || \
           grep -q "^\.env\.\*$" "$gitignore_file" 2>/dev/null; then
            env_pattern_found=true
        fi
    fi

    # If .env.maiass is not ignored, warn user and offer to add it
    if [[ "$env_pattern_found" == "false" && -f ".env.maiass" ]]; then
        print_warning "Environment file '.env.maiass' is not in .gitignore"
        echo -n "Add '.env.maiass' to .gitignore to avoid committing environment files? [Y/n]: "
        read -r add_to_gitignore

        if [[ "$add_to_gitignore" =~ ^[Nn]$ ]]; then
            print_info "Continuing without adding to .gitignore" "brief"
        else
            # Add .env.maiass to .gitignore
            if [[ ! -f "$gitignore_file" ]]; then
                echo "# Environment files" > "$gitignore_file"
                echo ".env.maiass" >> "$gitignore_file"
                print_success "Created .gitignore and added '.env.maiass'"
            else
                echo "" >> "$gitignore_file"
                echo "# MAIASS environment file" >> "$gitignore_file"
                echo ".env.maiass" >> "$gitignore_file"
                print_success "Added '.env.maiass' to .gitignore"
            fi
        fi
    fi
}

# Get the latest version from git tags
# Returns the highest semantic version tag, or empty string if no tags found
get_latest_version_from_tags() {
    local latest_tag
    # Get all tags that match semantic versioning pattern, sort them, and get the latest
    latest_tag=$(git tag -l | grep -E '^[0-9]+\.[0-9]+\.[0-9]+$' | sort -V | tail -1)
    echo "$latest_tag"
}

# Check if a git branch exists locally
branch_exists() {
    local branch_name="$1"
    git show-ref --verify --quiet "refs/heads/$branch_name"
}

# Check if a git remote exists
remote_exists() {
    local remote_name="${1:-origin}"
    git remote | grep -q "^$remote_name$"
}

# Check if we can push to a remote (tests connectivity)
can_push_to_remote() {
    local remote_name="${1:-origin}"
    if ! remote_exists "$remote_name"; then
        return 1
    fi
    # Test if we can reach the remote (this is a dry-run)
    git ls-remote "$remote_name" >/dev/null 2>&1
}

# Perform merge operation between two branches with remote and PR support
perform_merge_operation() {
    local source_branch="$1"
    local target_branch="$2"

    if [[ -z "$source_branch" || -z "$target_branch" ]]; then
        print_error "Source and target branches must be specified"
        return 1
    fi

    # Note: Tags are created during version bump workflow, not during merge operations

    # Determine which pull request setting to use based on target branch
    local use_pullrequest="off"
    if [[ "$target_branch" == "$stagingbranch" ]]; then
        use_pullrequest="$staging_pullrequests"
    elif [[ "$target_branch" == "$mainbranch" ]]; then
        use_pullrequest="$main_pullrequests"
    fi

    # Handle pull requests vs direct merge
    if [[ "$use_pullrequest" == "on" ]] && can_push_to_remote "origin"; then
        print_info "Creating pull request for merge"

        # Ensure source branch is pushed
        run_git_command "git push --set-upstream origin '$source_branch'" "normal" || run_git_command "git push origin '$source_branch'" "normal"
        check_git_success

        # Create pull request URL
        if [[ "$REPO_PROVIDER" == "bitbucket" ]]; then
            open_url "https://bitbucket.org/$BITBUCKET_WORKSPACE/$BITBUCKET_REPO_SLUG/pull-requests/new?source=$source_branch&dest=$target_branch&title=Release%20${newversion:-merge}"
        elif [[ "$REPO_PROVIDER" == "github" ]]; then
            open_url "https://github.com/$GITHUB_OWNER/$GITHUB_REPO/compare/$target_branch...$source_branch?quick_pull=1&title=Release%20${newversion:-merge}"
        else
            print_warning "Unknown repository provider. Cannot create pull request URL."
        fi

        logthis "Created pull request for ${newversion:-merge}"
    else
        # Direct merge
        print_info "Performing direct merge: $source_branch → $target_branch"

        run_git_command "git checkout '$target_branch'" "normal"
        check_git_success

        # Pull latest changes if remote available
        if remote_exists "origin"; then
            # Check if current branch has upstream tracking
            if git rev-parse --abbrev-ref --symbolic-full-name '@{u}' >/dev/null 2>&1; then
                run_git_command "git pull" "normal" || print_warning "Could not pull latest changes (continuing anyway)"
            else
                # Try to set up tracking if remote branch exists
                if git ls-remote --heads origin "$target_branch" | grep -q "$target_branch"; then
                    print_info "Setting up tracking for $target_branch with origin/$target_branch"
                    run_git_command "git branch --set-upstream-to=origin/'$target_branch' '$target_branch'" "normal"
                    run_git_command "git pull" "normal" || print_warning "Could not pull latest changes (continuing anyway)"
                else
                    print_info "Remote branch origin/$target_branch doesn't exist - skipping pull"
                fi
            fi
        fi

        run_git_command "git merge '$source_branch'" "debug"
        check_git_success

        # Push to remote if available
        if can_push_to_remote "origin"; then
            # Check if current branch has upstream tracking, if not set it up
            if ! git rev-parse --abbrev-ref --symbolic-full-name '@{u}' >/dev/null 2>&1; then
                print_info "Setting up upstream tracking for $target_branch"
                run_git_command "git push --set-upstream origin '$target_branch'" "debug"
            else
                run_git_command "git push" "debug"
            fi
            check_git_success
        fi

        print_success "Merged $source_branch into $target_branch"
        logthis "Merged $source_branch into $target_branch"
    fi
}

function getBitbucketUrl(){
    print_section "Getting Bitbucket URL"
    REMOTE_URL=$(git remote get-url origin)
    if [[ "$REMOTE_URL" =~ bitbucket.org[:/]([^/]+)/([^/.]+) ]]; then
        WORKSPACE="${BASH_REMATCH[1]}"
        REPO="${BASH_REMATCH[2]}"
    else
        echo "Failed to extract workspace and repo from remote URL"
        exit 1
    fi
}

function branchDetection() {
    print_debug "Branch Detection"
    print_info "Currently on branch: ${BWhite}$branch_name${Color_Off}" "brief"
    
    # In AI-only mode, still show branch info and offer develop switching for better workflow
    # but skip the complex version management branch logic later
    if [[ "$ai_commits_only" == "true" ]]; then
        print_debug "AI-only mode: Simplified branch detection"
        # Still offer develop branch switching if on main/master and develop exists
        if [[ "$branch_name" == "$mainbranch" || "$branch_name" == "master" || "$branch_name" == "main" ]]; then
            if git show-ref --verify --quiet "refs/heads/develop"; then
                print_info "You're on $branch_name branch, but 'develop' branch exists"
                echo -n -e "${BYellow}Switch to develop branch for development work? [y/N]:${Color_Off} "
                read -r switch_to_dev
                if [[ "$switch_to_dev" =~ ^[Yy]$ ]]; then
                    if git checkout develop 2>/dev/null; then
                        branch_name="develop"
                        print_success "Switched to develop branch"
                    else
                        print_warning "Could not switch to develop branch"
                    fi
                fi
            fi
        fi
        return 0
    fi
    
    # if we are on the main branch, advise user not to use this script for hot fixes
    # if on main or a release branch, advise the user
    if [[ "$branch_name" == "$mainbranch" || "$branch_name" == release/* || "$branch_name" == releases/* ]]; then
        print_warning "You are currently on the $branch_name branch"
        read -n 1 -s -p "$(echo -e ${BYellow}Do you want to continue on $developbranch? [y/N]${Color_Off} )" REPLY
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            print_error "Operation cancelled by user"
            exit 1
        fi
    fi
    # if branch starts with release/ or releases/ offer do same as mainbranch

    # if we are on the main or staging branch, switch to develop
    if [ "$branch_name" == "$mainbranch" ] || [ "$branch_name" == "$stagingbranch" ]; then
        # Check if develop branch exists before attempting to switch
        if git show-ref --verify --quiet "refs/heads/$developbranch"; then
            print_info "Switching to $developbranch branch..."
            run_git_command "git checkout '$developbranch'" "normal"
            check_git_success
            branch_name="$developbranch"
            print_success "Switched to $developbranch branch"
        elif git ls-remote --heads origin "$developbranch" 2>/dev/null | grep -q "$developbranch"; then
            # Branch exists on remote but not locally
            print_info "Found '$developbranch' branch on remote"
            echo -n "Check out remote '$developbranch' branch? [Y/n]: "
            read -r checkout_remote
            if [[ ! "$checkout_remote" =~ ^[Nn]$ ]]; then
                print_info "Checking out $developbranch from remote..."
                run_git_command "git checkout -b '$developbranch' 'origin/$developbranch'" "normal"
                if [ $? -eq 0 ]; then
                    branch_name="$developbranch"
                    print_success "Checked out $developbranch from remote"
                else
                    print_error "Failed to check out remote branch"
                    print_info "Continuing on current branch: $branch_name"
                fi
            else
                print_info "Continuing on current branch: $branch_name"
            fi
        else
            # No develop branch found locally or remotely
            print_warning "⚠ Development branch '$developbranch' not found locally or on remote"
            print_info "\nFull version management requires a development branch for Git Flow workflow."
            echo ""
            echo "Would you like to:"
            echo "1) Create '$developbranch' branch now and continue (recommended)"
            echo "2) Continue commit (commit-only mode, no versioning)"
            echo "3) Exit"
            echo -n "Enter choice [1-3, default: 1]: "
            read -r branch_choice
            
            case "$branch_choice" in
                2)
                    print_info "Continuing in commit-only mode on $branch_name"
                    print_info "Note: Version management and branch merging will be skipped"
                    # Set a flag to indicate commit-only mode
                    export MAIASS_COMMIT_ONLY_MODE="true"
                    ;;
                3)
                    print_info "Exiting. Run 'maiass --bootstrap' to configure your project properly"
                    exit 0
                    ;;
                *)
                    # Create develop branch (default)
                    print_info "Creating '$developbranch' branch..."
                    run_git_command "git checkout -b '$developbranch'" "normal"
                    if [ $? -eq 0 ]; then
                        branch_name="$developbranch"
                        print_success "✓ Created and switched to '$developbranch' branch"
                        print_info "Consider updating your .env.maiass file to reflect this configuration"
                    else
                        print_error "Failed to create '$developbranch' branch"
                        print_info "Falling back to commit-only mode on $branch_name"
                        export MAIASS_COMMIT_ONLY_MODE="true"
                    fi
                    ;;
            esac
        fi
    fi
  # get the jira ticket number from the branch
  if git rev-parse --verify HEAD >/dev/null 2>&1; then
    branch_name=$(git rev-parse --abbrev-ref HEAD)
  else
    branch_name=$(git symbolic-ref --short HEAD 2>/dev/null || echo "main")
  fi
  jira_ticket_number=$(echo "$branch_name" | grep -oE '[A-Z]+-[0-9]+')
  # get the project as the jira ticket number without the dash and number
  project_name=$(echo "$jira_ticket_number" | cut -d'-' -f1)
  # get the client name from the remote
  client_name=$(git config --get remote.origin.url | grep -oE '[^/]+\.git$' | sed 's/\.git$//')
  export branch_name jira_ticket_number project_name client_name

}

has_staged_changes() {
  [ -n "$(git diff --cached)" ]
}

has_uncommitted_changes() {
  [ -n "$(git status --porcelain)" ]
}

has_unstaged_changes() {
  [ -n "$(git status --porcelain | grep -E '^.[^[:space:]]')" ]
}

function changeManagement(){
  checkUncommittedChanges
}

function mergeDevelop() {
  local has_version_files="${1:-true}"  # Default to true for backward compatibility
  shift  # Remove the first argument so remaining args can be passed to getVersion

  print_debug "Git Workflow"

  # Check for uncommitted changes first
  if has_uncommitted_changes; then
    print_warning "You have uncommitted changes."
    read -n 1 -s -p "$(echo -e ${BYellow}Do you want to commit them now? [y/N]${Color_Off} )" REPLY
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
      handle_staged_commit
      # Check again if there are still uncommitted changes
      if has_uncommitted_changes; then
        print_error "Still have uncommitted changes. Please commit or stash them first."
        exit 1
      fi
    else
      print_error "Cannot proceed with uncommitted changes. Please commit or stash them first."
      exit 1
    fi
  fi

  # Get current branch name
  local current_branch
  if git rev-parse --verify HEAD >/dev/null 2>&1; then
    current_branch=$(git rev-parse --abbrev-ref HEAD)
  else
    current_branch=$(git symbolic-ref --short HEAD 2>/dev/null || echo "main")
  fi

  # Check if we're already on develop or need to merge
  if [ "$current_branch" != "$developbranch" ]; then
    print_info "Not on $developbranch branch (currently on $current_branch)"
    read -n 1 -s -p "$(echo -e ${Yellow}Do you want to merge ${BGreen}$current_branch${Yellow} into ${BGreen}$developbranch${Yellow}? [y/N]${Color_Off} )" REPLY
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
      print_info "User chose not to merge into $developbranch. Staying on $current_branch."
      # print_info "All done. You are on branch: ${BWhite}$current_branch${Color_Off}"
      print_signoff_with_topup
      exit 0
    fi

    # Checkout develop and update it
    run_git_command "git checkout '$developbranch'" "normal"
    check_git_success

    # Pull latest changes
    if remote_exists "origin"; then
      print_info "Pulling latest changes from $developbranch..."
      run_git_command "git pull origin '$developbranch'" "normal"
      check_git_success
    fi

    # Merge the branch
    run_git_command "git merge --no-ff -m 'Merge $current_branch into $developbranch' '$current_branch'" "normal"
    check_git_success
    logthis "Merged $current_branch into $developbranch"
  else
    # On develop, just pull latest
    if remote_exists "origin"; then
      print_info "Pulling latest changes from $developbranch..."
      run_git_command "git pull origin '$developbranch'" "normal"
      check_git_success
    fi
  fi

  # Only proceed with version management if version files exist and we're on develop
  local current_branch_check
  if git rev-parse --verify HEAD >/dev/null 2>&1; then
    current_branch_check=$(git rev-parse --abbrev-ref HEAD)
  else
    current_branch_check=$(git symbolic-ref --short HEAD 2>/dev/null || echo "main")
  fi
  
  if [[ "$has_version_files" == "true" && "$current_branch_check" == "$developbranch" ]]; then
    # Get the version bump type (major, minor, patch)
    local bump_type="${1:-patch}"  # Default to patch if not specified
    shift

    # Bump the version
    getVersion "$bump_type"

    # Determine if we should create a release branch and tag
    local create_release=true
    if [ "$bump_type" == "patch" ]; then
      read -n 1 -s -p "$(echo -e ${BYellow}This is a patch version. Create a release branch and tag? [y/N]${Color_Off} )" REPLY
      echo
      if [[ $REPLY =~ ^[Yy]$ ]]; then
        create_release=true
      else
        create_release=false
      fi
    fi

    if [ "$create_release" == true ]; then
      # Create release branch
      run_git_command "git checkout -b 'release/$newversion'" "normal"
      check_git_success

      # Update version and changelog
      bumpVersion
      updateChangelog "$changelog_path" "$newversion"

      # Commit changes
      run_git_command "git add -A" "normal"
      run_git_command "git commit -m 'Bumped version to $newversion'" "normal"
      check_git_success

      # Create tag
      if ! git tag -l "$newversion" | grep -q "^$newversion$"; then
        run_git_command "git tag -a '$newversion' -m 'Release version $newversion'" "normal"
        check_git_success
        print_success "Created release tag $newversion"
      else
        print_warning "Tag $newversion already exists"
      fi

      # Push the release branch and tag if remote exists
      if remote_exists "origin"; then
        run_git_command "git push -u origin 'release/$newversion'" "normal"
        run_git_command "git push origin '$newversion'" "normal"
      fi

      # Go back to develop
      run_git_command "git checkout '$developbranch'" "normal"
      check_git_success

      # Merge release branch into develop
      run_git_command "git merge --no-ff -m 'Merge release/$newversion into $developbranch' 'release/$newversion'" "normal"
      check_git_success

      print_success "Merged release/$newversion into $developbranch"
      # Push develop
      if remote_exists "origin"; then
        run_git_command "git push origin '$developbranch'" "normal"
      fi

      check_git_success
    else
      # For patch versions without release branch, update directly on develop
      print_info "Updating version and changelog directly on $developbranch..."
      bumpVersion
      updateChangelog "$changelog_path" "$newversion"

      # Commit changes
      run_git_command "git add -A" "normal"
      run_git_command "git commit -m 'Bump version to $newversion (no release)'" "normal"
      check_git_success

      # Push changes if remote exists
      if remote_exists "origin"; then
        run_git_command "git push origin '$developbranch'" "normal"
      fi

      print_success "Version updated to $newversion on $developbranch"
    fi
  else
    # Just do the git workflow without version management
    print_info "Skipping version bump and changelog update (no version files)"
    # Only show merge success if develop branch exists
    if branch_exists "$developbranch"; then
      print_success "Merged $branch_name into $developbranch"
    else
      print_info "Completed workflow on current branch (no develop branch)"
    fi
  fi
}

# function to show deploy options
function deployOptions() {
  # Check what branches are available and adapt options accordingly
  local has_develop has_staging has_main has_remote
  has_develop=$(branch_exists "$developbranch" && echo "true" || echo "false")
  has_staging=$(branch_exists "$stagingbranch" && echo "true" || echo "false")
  has_main=$(branch_exists "$mainbranch" && echo "true" || echo "false")
  has_remote=$(remote_exists "origin" && echo "true" || echo "false")

  echo -e "${BYellow}What would you like to do?${SoftPink}"

  # Build dynamic menu based on available branches
  local option_count=0
  local options=()

  if [[ "$has_develop" == "true" && "$has_staging" == "true" ]]; then
    ((option_count++))
    options["$option_count"]="merge_develop_to_staging"
    echo "$option_count) Merge $developbranch to $stagingbranch"
  fi

  if [[ "$has_staging" == "true" ]]; then
    ((option_count++))
    options["$option_count"]="merge_current_to_staging"
    echo "$option_count) Merge $branch_name to $stagingbranch"
  fi

  # Only show direct merge to main if no staging branch exists (proper Git Flow)
  if [[ "$has_main" == "true" && "$has_staging" == "false" ]]; then
    ((option_count++))
    options["$option_count"]="merge_to_main"
    if [[ "$has_develop" == "true" ]]; then
      echo "$option_count) Merge $developbranch to $mainbranch"
    else
      echo "$option_count) Merge $branch_name to $mainbranch"
    fi
  fi

  if [[ "$has_remote" == "true" ]]; then
    ((option_count++))
    options["$option_count"]="push_current"
    echo "$option_count) Push current branch to remote"
  fi

  ((option_count++))
  options["$option_count"]="do_nothing"
  echo "$option_count) Do nothing (finish here)"

  if [[ $option_count -eq 1 ]]; then
    print_warning "Limited options available due to repository structure"
  fi

  read -p "$(echo -e ${BYellow}Enter choice [1-$option_count, Enter for $option_count]: ${Color_Off})" choice

  # Default to "do nothing" if user just hits Enter
  if [[ -z "$choice" ]]; then
    choice="$option_count"  # "do nothing" is always the last option
  fi

  # Handle user choice based on available options
  if [[ "$choice" =~ ^[0-9]+$ ]] && [[ "$choice" -ge 1 ]] && [[ "$choice" -le "$option_count" ]]; then
    local selected_action="${options[$choice]}"

    case "$selected_action" in
      "merge_develop_to_staging")
        print_info "Merging $developbranch to $stagingbranch"
        perform_merge_operation "$developbranch" "$stagingbranch"
        ;;
      "merge_current_to_staging")
        print_info "Merging $branch_name to $stagingbranch"
        perform_merge_operation "$branch_name" "$stagingbranch"
        ;;
      "merge_to_main")
        local source_branch
        if [[ "$has_develop" == "true" ]]; then
          source_branch="$developbranch"
        else
          source_branch="$branch_name"
        fi
        print_info "Merging $source_branch to $mainbranch"
        perform_merge_operation "$source_branch" "$mainbranch"
        ;;
      "push_current")
        print_info "Pushing current branch to remote"
        if can_push_to_remote "origin"; then
          run_git_command "git push --set-upstream origin '$branch_name'" "normal" || run_git_command "git push origin '$branch_name'" "normal"
          check_git_success
          print_success "Pushed $branch_name to remote"
        else
          print_error "Cannot push to remote"
        fi
        ;;
      "do_nothing")
        print_info "No action selected - finishing here"
        ;;
      *)
        print_error "Invalid selection"
        ;;
    esac
  else
    print_error "Invalid choice. Please select a number between 1 and $option_count"
  fi

  run_git_command "git checkout '$branch_name'" "normal"

  # print_info "All done. You are on branch: ${BWhite}$branch_name${Color_Off}"
  if type -t print_signoff_with_topup >/dev/null 2>&1; then
    print_signoff_with_topup
  fi

  # Clean up
  unset GIT_MERGE_AUTOEDIT
  unset tagmessage
}

# Function to check if we're in a git repository
check_git_repository() {
  if ! git rev-parse --git-dir >/dev/null 2>&1; then
    print_error "This directory is not a git repository!"
    print_error "Please run this script from within a git repository."
    exit 1
  fi

  # Get the repository root directory
  local git_root
  git_root=$(git rev-parse --show-toplevel 2>/dev/null)
  if [[ -z "$git_root" ]]; then
    print_error "Unable to determine git repository root!"
    exit 1
  fi

  export git_root
  print_debug "Git repository detected: $git_root"

}

fi # __SRC__Volumes_enigmadev_enigmadev_static_maiass_whole_bashmaiass_lib_core_git_sh
# --- End inlined: /Volumes/enigmadev/enigmadev/static/maiass-whole/bashmaiass/lib/core/git.sh ---

# --- Begin inlined: /Volumes/enigmadev/enigmadev/static/maiass-whole/bashmaiass/lib/core/changelog.sh ---
if [[ -z "${__SRC__Volumes_enigmadev_enigmadev_static_maiass_whole_bashmaiass_lib_core_changelog_sh:-}" ]]; then __SRC__Volumes_enigmadev_enigmadev_static_maiass_whole_bashmaiass_lib_core_changelog_sh=1

function updateChangelog() {
    local changelogpath="$1"
    local version="$2"
    [ -z "$changelogpath" ] && changelogpath="."

    # Determine changelog range from latest version entry in the changelog
    if [ -f "$changelogpath/$changelog_name" ]; then
        last_version=$(grep -m1 '^## ' "$changelogpath/$changelog_name" | sed 's/^## //')
        last_changelog_commit=$(git log -1 --format="%H" -S"## $last_version" -- "$changelogpath/$changelog_name")
    fi

    if [ -z "$last_changelog_commit" ]; then
        if git rev-parse --verify HEAD >/dev/null 2>&1; then
            last_changelog_commit=$(git rev-list --max-parents=0 HEAD)
        else
            # No commits yet, skip changelog generation
            return 0
        fi
    fi

    # Skip changelog if no commits exist
    if ! git rev-parse --verify HEAD >/dev/null 2>&1; then
        return 0
    fi

    log_range="$last_changelog_commit..HEAD"

        # Use sed to remove JIRA ticket numbers from commit messages before processing with awk
        changelog=$(git log "$log_range" --pretty=format:"%B" |
        grep -vEi '^(ncl|Merge|Bump|Fixing merge conflicts)' |
        sed -E 's/^\[?[A-Z]+-[0-9]+\]?[[:space:]:—-]+//' |
        awk '
        BEGIN { commit = "" }
        /^$/ {
            if (commit != "") {
                n = split(commit, lines, "\n")
                if (lines[1] != "") {
                    print "- " lines[1]
                    for (i = 2; i <= n; i++) {
                        if (lines[i] != "") {
                            print "\t" lines[i]
                        }
                    }
                }
                commit = ""
            }
            next
        }
        {
            if (commit == "" && $0 == "") next
            commit = commit (commit == "" ? "" : "\n") $0
        }
        END {
            if (commit != "") {
                n = split(commit, lines, "\n")
                if (lines[1] != "") {
                    print "- " lines[1]
                    for (i = 2; i <= n; i++) {
                        if (lines[i] != "") {
                            print "\t" lines[i]
                        }
                    }
                }
            }
        }')
        # remove double tabs and empty lines
        changelog=$(echo "$changelog" | sed -e 's/\t\t/\t/g' -e '/^[[:space:]]*$/d')
        
        # Remove JIRA ticket number from the beginning of each line if specified
        if [ -n "$jira_ticket_number" ]; then
            changelog=$(echo "$changelog" | sed -E "s/^$jira_ticket_number[[:space:]]*//g")
        fi
        
        changelog_internal=$(git log "$log_range" --pretty=format:"%an%n%B" |
        grep -vEi '^(ncl|Merge|Bump|Fixing merge conflicts)' |
        awk '
        BEGIN { commit = "" }

        # Blank line signals end of a commit
        /^$/ {
            process_commit()
            commit = ""
            next
        }

        {
            commit = commit $0 "\n"
        }

        END {
            process_commit()
        }

        function process_commit() {
            if (commit == "") return

            # Remove leading/trailing newlines
            gsub(/^\n+|\n+$/, "", commit)

            # Split into lines
            n = split(commit, lines, "\n")
            author = lines[1]
            subject = ""

            # Find the first non-empty line after author
            for (j = 2; j <= n; j++) {
            if (lines[j] ~ /[^[:space:]]/) {
                subject = lines[j]
                break
            }
            }

            # Skip if no meaningful subject
            if (subject == "") return

            printf("- %s: %s\n", author, subject)

            # Print rest of body lines (skip empty ones and trim trailing empty line)
            for (i = j + 1; i <= n; i++) {
            if (lines[i] ~ /[^[:space:]]/) {
                printf("\t%s\n", lines[i])
            }
            }
        }')

        if [ -n "$jira_ticket_number" ]; then
            changelog=$(echo "$changelog" | sed 's/^$jira_ticket_number //g')
            changelog_internal=$(echo "$changelog_internal" | sed 's/^$jira_ticket_number //g')
        fi
        changelog_internal=$(echo "$changelog_internal" | sed -e 's/\t\t/\t/g' -e '/^[[:space:]]*$/d')

    if [ -z "$changelog" ]; then
        print_info "No changelog to add"
    else
        # Use the provided version or fall back to $newversion for backward compatibility
        local version_to_use="${version:-$newversion}"
        
        if [ -z "$version_to_use" ]; then
            print_error "No version specified for changelog update"
            return 1
        fi
        
        if [ -f "$changelogpath/$changelog_name" ]; then
            if [ "$(head -n 1 "$changelogpath/$changelog_name" | sed 's/## //' | cut -d. -f1,2)" == "$(echo $version_to_use | cut -d. -f1,2)" ]; then
                if [ "$(sed -n '2p' "$changelogpath/$changelog_name")" == "$humandate" ]; then
                    sed_inplace '1,3d' "$changelogpath/$changelog_name"
                    echo -e "## $version_to_use\n$humandate\n\n$changelog\n$(cat "$changelogpath/$changelog_name")" > "$changelogpath/$changelog_name"
                else
                    echo -e "## $version_to_use\n$humandate\n\n$changelog\n\n$(cat "$changelogpath/$changelog_name")" > "$changelogpath/$changelog_name"
                fi
            else
                echo -e "## $version_to_use\n$humandate\n\n$changelog\n\n$(cat "$changelogpath/$changelog_name")" > "$changelogpath/$changelog_name"
            fi
            print_success "Updated changelog in $changelogpath/$changelog_name to version $version_to_use"
        else
            echo -e "## $version_to_use\n$humandate\n\n$changelog" > "$changelogpath/$changelog_name"
            print_success "Created changelog in $changelogpath/$changelog_name with version $version_to_use"
        fi
    fi

    if [ -z "$changelog_internal" ]; then
        print_info "No internal changelog to add"
    elif [ -f "$changelogpath/$changelog_internal_name" ]; then
        if [ "$(head -n 1 "$changelogpath/$changelog_internal_name" | sed 's/## //' | cut -d. -f1,2)" == "$(echo $newversion | cut -d. -f1,2)" ]; then
            if [ "$(sed -n '2p' "$changelogpath/$changelog_internal_name")" == "$longhumandate" ]; then
                sed_inplace '1,3d' "$changelogpath/$changelog_internal_name"
                echo -e "## $newversion\n$longhumandate\n\n$changelog_internal\n$(cat "$changelogpath/$changelog_internal_name")" > "$changelogpath/$changelog_internal_name"
            else
                echo -e "## $newversion\n$longhumandate\n\n$changelog_internal\n\n$(cat "$changelogpath/$changelog_internal_name")" > "$changelogpath/$changelog_internal_name"
            fi
        else
            echo -e "## $newversion\n$longhumandate\n\n$changelog_internal\n\n$(cat "$changelogpath/$changelog_internal_name")" > "$changelogpath/$changelog_internal_name"
        fi
        print_success "Updated changelog in $changelogpath/$changelog_internal_name"
    else
        print_info "Internal changelog $changelogpath/$changelog_internal_name does not exist, skipping"
    fi
}

fi # __SRC__Volumes_enigmadev_enigmadev_static_maiass_whole_bashmaiass_lib_core_changelog_sh
# --- End inlined: /Volumes/enigmadev/enigmadev/static/maiass-whole/bashmaiass/lib/core/changelog.sh ---

# --- Begin inlined: /Volumes/enigmadev/enigmadev/static/maiass-whole/bashmaiass/lib/core/bootstrap.sh ---
if [[ -z "${__SRC__Volumes_enigmadev_enigmadev_static_maiass_whole_bashmaiass_lib_core_bootstrap_sh:-}" ]]; then __SRC__Volumes_enigmadev_enigmadev_static_maiass_whole_bashmaiass_lib_core_bootstrap_sh=1

# ---------------------------------------------------------------
# MAIASS Bootstrap Module
# Interactive project setup and configuration
# ---------------------------------------------------------------

# Load existing .env.maiass values to use as defaults
load_existing_bootstrap_values() {
    if [[ -f ".env.maiass" ]]; then
        print_debug "Loading existing configuration values as defaults"
        
        # Read existing values without executing them (security)
        while IFS= read -r line || [[ -n "$line" ]]; do
            # Skip comments and empty lines
            [[ -z "$line" || "$line" == \#* ]] && continue
            
            # Extract key=value pairs
            if [[ "$line" =~ ^([A-Z_]+)=(.*)$ ]]; then
                local key="${BASH_REMATCH[1]}"
                local value="${BASH_REMATCH[2]}"
                
                # Remove quotes if present
                if [[ "$value" == \"*\" || "$value" == \'*\' ]]; then
                    value=$(echo "$value" | sed 's/^["'\'']//' | sed 's/["'\'']$//')
                fi
                
                # Map to bootstrap variables
                case "$key" in
                    "MAIASS_REPO_TYPE")
                        export EXISTING_PROJECT_TYPE="$value"
                        ;;
                    "MAIASS_WP_FILES_PATH")
                        export EXISTING_WP_PATH="$value"
                        ;;
                    "MAIASS_VERSION_PRIMARY_FILE")
                        export EXISTING_VERSION_SOURCE="$value"
                        ;;
                    "MAIASS_MAINBRANCH")
                        export EXISTING_MAIN_BRANCH="$value"
                        ;;
                    "MAIASS_DEVELOPBRANCH")
                        export EXISTING_DEVELOP_BRANCH="$value"
                        ;;
                    "MAIASS_MODE")
                        if [[ "$value" == "ai_only" ]]; then
                            export EXISTING_FEATURES="ai_only"
                        fi
                        ;;
                esac
            fi
        done < ".env.maiass"
    fi
}

# Main bootstrap function - called after git repository detection
bootstrap_project() {
    local needs_bootstrap=false
    local is_reconfigure=false
    
    # Check if .env.maiass exists
    if [[ ! -f ".env.maiass" ]]; then
        needs_bootstrap=true
    elif [[ "${MAIASS_FORCE_BOOTSTRAP:-false}" == "true" ]]; then
        needs_bootstrap=true
        is_reconfigure=true
    fi
    
    # If no bootstrap needed, exit early
    if [[ "$needs_bootstrap" == "false" ]]; then
        print_debug "Project already configured (.env.maiass exists)"
        return 0
    fi
    
    # Load existing values if reconfiguring
    if [[ "$is_reconfigure" == "true" ]]; then
        load_existing_bootstrap_values
    fi
    
    if [[ "$is_reconfigure" == "true" ]]; then
        print_info "🔧 Reconfiguring MAIASS for this project." "always"
        print_info "Current values will be shown as defaults.\n" "always"
    else
        print_info "🚀 Setting up MAIASS for this project." "always"
        print_info "This is a one-time setup that will make future runs smoother.\n" "always"
    fi
    
    # Step 1: Create .env.maiass file
    setup_env_file
    
    # Step 2: Detect and configure project type
    detect_and_configure_project_type
    
    # Step 3: Configure version source
    configure_version_source
    
    # Step 4: Choose MAIASS features
    choose_maiass_features
    
    # Step 5: Configure branch strategy
    configure_branch_strategy
    
    # Step 6: Save configuration
    save_bootstrap_config
    
    print_success "✅ Project setup complete!" "always"
    print_info "You can modify these settings anytime by editing .env.maiass" "always"
    print_info "Run 'maiass' again to start using your configured workflow.\n" "always"
    
    # Exit after bootstrap to prevent main workflow from running
    exit 0
}

# Step 1: Create .env.maiass file and handle .gitignore
setup_env_file() {
    print_section "📄 Configuration File Setup"
    
    if [[ "${MAIASS_FORCE_BOOTSTRAP:-false}" == "true" ]]; then
        print_info "Updating existing .env.maiass file with new configuration." "always"
        export BOOTSTRAP_ADD_TO_GITIGNORE="true"  # Keep existing .gitignore behavior
        return 0
    fi
    
    print_info "MAIASS uses a .env.maiass file to store project-specific settings." "always"
    echo -n "Create .env.maiass file? [Y/n]: "
    read -r create_env
    
    if [[ "$create_env" =~ ^[Nn]$ ]]; then
        print_warning "Cannot proceed without configuration file. Exiting setup." "always"
        exit 1
    fi
    
    # Ask about .gitignore
    print_info "\nShould .env.maiass be added to .gitignore?" "always"
    print_info "  Recommended: Yes (keeps local settings private)" "always"
    print_info "  Alternative: No (shares settings with team)" "always"
    echo -n "Add to .gitignore? [Y/n]: "
    read -r add_to_gitignore
    
    export BOOTSTRAP_ADD_TO_GITIGNORE="true"
    if [[ "$add_to_gitignore" =~ ^[Nn]$ ]]; then
        export BOOTSTRAP_ADD_TO_GITIGNORE="false"
    fi
    
    print_success "✓ Will create .env.maiass file"
}

# Step 2: Detect project type (WordPress, Node.js, generic)
detect_and_configure_project_type() {
    print_section "🔍 Project Type Detection"
    
    local detected_type="generic"
    local wp_path=""
    
    # If reconfiguring, show existing type and ask if user wants to change it
    if [[ -n "$EXISTING_PROJECT_TYPE" ]]; then
        print_info "Current project type: $EXISTING_PROJECT_TYPE" "always"
        echo -n "Change project type detection? [y/N]: "
        read -r change_type
        
        if [[ ! "$change_type" =~ ^[Yy]$ ]]; then
            # Keep existing configuration
            export BOOTSTRAP_PROJECT_TYPE="$EXISTING_PROJECT_TYPE"
            export BOOTSTRAP_WP_PATH="${EXISTING_WP_PATH:-.}"
            print_info "✓ Keeping existing project type: $EXISTING_PROJECT_TYPE" "always"
            return 0
        fi
    fi
    
    # Perform fresh detection
    # Check for WordPress
    if detect_wordpress_project; then
        detected_type="wordpress"
        wp_path=$(configure_wordpress_project)
    # Check for Node.js
    elif [[ -f "package.json" ]]; then
        detected_type="nodejs"
        print_info "📦 Detected Node.js project (package.json found)" "always"
    else
        print_info "📁 Generic project detected" "always"
    fi
    
    export BOOTSTRAP_PROJECT_TYPE="$detected_type"
    export BOOTSTRAP_WP_PATH="$wp_path"
}

# WordPress project detection and configuration
detect_wordpress_project() {
    print_debug "DEBUG: Starting WordPress detection"
    
    # Look for definitive WordPress indicators
    if [[ -f "wp-config.php" ]]; then
        print_debug "DEBUG: Found wp-config.php - WordPress detected"
        return 0
    fi
    
    if [[ -d "wp-content" ]]; then
        print_debug "DEBUG: Found wp-content directory - WordPress detected"
        return 0
    fi
    
    # Check for WordPress theme (both files must exist in same directory)
    if [[ -f "style.css" && -f "functions.php" ]]; then
        print_debug "DEBUG: Found style.css AND functions.php - WordPress theme detected"
        return 0
    fi
    
    # Check for WordPress plugin header (more specific search)
    local plugin_check
    plugin_check=$(find . -maxdepth 2 -name "*.php" -exec grep -l "Plugin Name:" {} \; 2>/dev/null | head -1)
    if [[ -n "$plugin_check" ]]; then
        print_debug "DEBUG: Found WordPress plugin header in: $plugin_check"
        return 0
    fi
    
    # Check for WordPress theme header (more specific search)
    local theme_check
    theme_check=$(find . -maxdepth 2 -name "style.css" -exec grep -l "Theme Name:" {} \; 2>/dev/null | head -1)
    if [[ -n "$theme_check" ]]; then
        print_debug "DEBUG: Found WordPress theme header in: $theme_check"
        return 0
    fi
    
    print_debug "DEBUG: No WordPress indicators found"
    return 1
}

configure_wordpress_project() {
    print_info "🔌 WordPress project detected!" "always"
    
    local wp_type=""
    local wp_path="."
    
    # Determine WordPress project type
    if [[ -f "wp-config.php" ]] || [[ -d "wp-content" ]]; then
        wp_type="site"
        print_info "Detected: WordPress site root" "always"
        wp_path=$(configure_wordpress_site)
    elif [[ -f "style.css" && -f "functions.php" ]]; then
        wp_type="theme"
        print_info "Detected: WordPress theme" "always"
    elif find . -maxdepth 1 -name "*.php" -exec grep -l "Plugin Name:" {} \; 2>/dev/null | head -1 >/dev/null; then
        wp_type="plugin"
        print_info "Detected: WordPress plugin" "always"
    else
        # Ask user to clarify
        print_info "WordPress files detected, but type unclear." "always"
        echo "What type of WordPress project is this?"
        echo "1) Theme (in theme directory)"
        echo "2) Plugin (in plugin directory)"
        echo "3) Full site (wp-config.php in root)"
        echo -n "Enter choice [1-3]: "
        read -r wp_choice
        
        case "$wp_choice" in
            1) wp_type="theme" ;;
            2) wp_type="plugin" ;;
            3) wp_type="site"; wp_path=$(configure_wordpress_site) ;;
            *) wp_type="theme" ;;
        esac
    fi
    
    export BOOTSTRAP_WP_TYPE="$wp_type"
    echo "$wp_path"
}

configure_wordpress_site() {
    print_info "\nFor WordPress sites, MAIASS needs to know which theme/plugin to manage." "always"
    echo "Please specify the path to your active theme or plugin:"
    echo "Examples:"
    echo "  wp-content/themes/my-theme"
    echo "  wp-content/plugins/my-plugin"
    
    # Show existing value if available
    if [[ -n "$EXISTING_WP_PATH" && "$EXISTING_WP_PATH" != "." ]]; then
        echo -n "Path [current: $EXISTING_WP_PATH]: "
    else
        echo -n "Path: "
    fi
    read -r wp_target_path
    
    # Use existing value if no input provided
    if [[ -z "$wp_target_path" && -n "$EXISTING_WP_PATH" ]]; then
        wp_target_path="$EXISTING_WP_PATH"
    fi
    
    # Validate the path exists
    while [[ ! -d "$wp_target_path" ]]; do
        print_warning "Directory '$wp_target_path' not found."
        echo -n "Please enter a valid path: "
        read -r wp_target_path
    done
    
    # Check if it's a theme or plugin
    if [[ -f "$wp_target_path/style.css" && -f "$wp_target_path/functions.php" ]]; then
        print_success "✓ WordPress theme confirmed: $wp_target_path"
        export BOOTSTRAP_WP_TYPE="theme"
    elif find "$wp_target_path" -maxdepth 1 -name "*.php" -exec grep -l "Plugin Name:" {} \; 2>/dev/null | head -1 >/dev/null; then
        print_success "✓ WordPress plugin confirmed: $wp_target_path"
        export BOOTSTRAP_WP_TYPE="plugin"
    else
        print_warning "Could not confirm WordPress theme/plugin in '$wp_target_path'"
        print_info "Continuing with generic configuration..."
        export BOOTSTRAP_WP_TYPE="generic"
    fi
    
    echo "$wp_target_path"
}

# Step 3: Configure version source
configure_version_source() {
    print_section "📋 Version Source Configuration"
    
    local version_sources=()
    local recommended_source=""
    
    # Check what version files exist
    if [[ -f "package.json" ]]; then
        version_sources+=("package.json")
        recommended_source="package.json"
    fi
    
    if [[ -f "VERSION" ]]; then
        version_sources+=("VERSION")
        if [[ -z "$recommended_source" ]]; then
            recommended_source="VERSION"
        fi
    fi
    
    # Check for WordPress version files if applicable
    if [[ "$BOOTSTRAP_PROJECT_TYPE" == "wordpress" ]]; then
        local wp_path="${BOOTSTRAP_WP_PATH:-.}"
        if [[ -f "$wp_path/style.css" ]]; then
            version_sources+=("$wp_path/style.css")
            if [[ -z "$recommended_source" ]]; then
                recommended_source="$wp_path/style.css"
            fi
        fi
    fi
    
    if [[ ${#version_sources[@]} -eq 0 ]]; then
        print_info "No version files found. You can:" "always"
        echo "1) Create a VERSION file (recommended for simple projects)"
        echo "2) Create a package.json file (recommended for Node.js projects)"
        echo "3) Skip versioning (AI commits only)"
        echo -n "Enter choice [1-3]: "
        read -r version_choice
        
        case "$version_choice" in
            1) 
                echo "1.0.0" > VERSION
                recommended_source="VERSION"
                print_success "✓ Created VERSION file with initial version 1.0.0"
                ;;
            2)
                create_basic_package_json
                recommended_source="package.json"
                ;;
            3)
                export BOOTSTRAP_VERSION_SOURCE=""
                export BOOTSTRAP_FEATURES="ai_only"
                return 0
                ;;
        esac
    else
        print_info "Found version files: ${version_sources[*]}" "always"
        if [[ -n "$recommended_source" ]]; then
            # Show existing value if available
            if [[ -n "$EXISTING_VERSION_SOURCE" ]]; then
                print_info "Current: $EXISTING_VERSION_SOURCE" "always"
                print_info "Recommended: $recommended_source" "always"
                echo -n "Use $recommended_source as version source? [Y/n, Enter to keep current]: "
            else
                print_info "Recommended: $recommended_source" "always"
                echo -n "Use $recommended_source as version source? [Y/n]: "
            fi
            read -r use_recommended
            
            if [[ -z "$use_recommended" && -n "$EXISTING_VERSION_SOURCE" ]]; then
                # Keep existing value
                export BOOTSTRAP_VERSION_SOURCE="$EXISTING_VERSION_SOURCE"
                return 0
            elif [[ ! "$use_recommended" =~ ^[Nn]$ ]]; then
                export BOOTSTRAP_VERSION_SOURCE="$recommended_source"
                return 0
            fi
        fi
        
        # Let user choose
        echo "Select version source:"
        for i in "${!version_sources[@]}"; do
            echo "$((i+1))) ${version_sources[i]}"
        done
        echo -n "Enter choice [1-${#version_sources[@]}]: "
        read -r source_choice
        
        if [[ "$source_choice" =~ ^[0-9]+$ ]] && [[ "$source_choice" -ge 1 ]] && [[ "$source_choice" -le ${#version_sources[@]} ]]; then
            export BOOTSTRAP_VERSION_SOURCE="${version_sources[$((source_choice-1))]}"
        else
            export BOOTSTRAP_VERSION_SOURCE="$recommended_source"
        fi
    fi
    
    print_success "✓ Version source: ${BOOTSTRAP_VERSION_SOURCE}"
}

create_basic_package_json() {
    local project_name
    project_name=$(basename "$(pwd)")
    cat > package.json << EOF
{
  "name": "$project_name",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "keywords": [],
  "author": "",
  "license": "ISC"
}
EOF
    print_success "✓ Created basic package.json with version 1.0.0"
}

# Step 4: Choose MAIASS features
choose_maiass_features() {
    print_section "⚙️ Feature Selection"
    
    if [[ "$BOOTSTRAP_FEATURES" == "ai_only" ]]; then
        print_info "Features: AI commit messages only (no version files)" "always"
        return 0
    fi
    
    print_info "What MAIASS features would you like to use?" "always"
    echo "1) Full workflow (versioning + changelog + AI commits)"
    echo "2) Versioning only (version bumping without changelog)"
    echo "3) AI commit messages only"
    
    # Show existing value if available
    if [[ "$EXISTING_FEATURES" == "ai_only" ]]; then
        echo -n "Enter choice [1-3, current: 3]: "
    else
        echo -n "Enter choice [1-3, default: 1]: "
    fi
    read -r feature_choice
    
    # Use existing value if no input provided
    if [[ -z "$feature_choice" && "$EXISTING_FEATURES" == "ai_only" ]]; then
        feature_choice="3"
    fi
    
    case "$feature_choice" in
        2) export BOOTSTRAP_FEATURES="versioning_only" ;;
        3) export BOOTSTRAP_FEATURES="ai_only" ;;
        *) export BOOTSTRAP_FEATURES="full" ;;
    esac
    
    local feature_desc
    case "$BOOTSTRAP_FEATURES" in
        "versioning_only") feature_desc="Versioning only" ;;
        "ai_only") feature_desc="AI commit messages only" ;;
        *) feature_desc="Full workflow (versioning + changelog + AI)" ;;
    esac
    
    print_success "✓ Features: $feature_desc"
}

# Step 5: Configure branch strategy
configure_branch_strategy() {
    print_section "🌿 Branch Strategy Configuration"
    
    # Detect main branch (main vs master) - use current branch if no commits yet
    local main_branch=""
    if git show-ref --verify --quiet refs/heads/main; then
        main_branch="main"
    elif git show-ref --verify --quiet refs/heads/master; then
        main_branch="master"
    else
        # For empty repos, use the current branch name
        local current_branch
        current_branch=$(git symbolic-ref --short HEAD 2>/dev/null || echo "main")
        
        # Check remote if available
        if git ls-remote --heads origin "$current_branch" 2>/dev/null | grep -q "$current_branch"; then
            main_branch="$current_branch"
        elif git ls-remote --heads origin main 2>/dev/null | grep -q main; then
            main_branch="main"
        elif git ls-remote --heads origin master 2>/dev/null | grep -q master; then
            main_branch="master"
        else
            main_branch="$current_branch"  # Use whatever branch we're currently on
        fi
    fi
    
    # Show existing values if available
    if [[ -n "$EXISTING_MAIN_BRANCH" ]]; then
        print_info "Current main branch: $EXISTING_MAIN_BRANCH" "always"
        print_info "Detected main branch: $main_branch" "always"
        if [[ "$EXISTING_MAIN_BRANCH" != "$main_branch" ]]; then
            echo -n "Update main branch to $main_branch? [y/N]: "
            read -r update_main
            if [[ "$update_main" =~ ^[Yy]$ ]]; then
                main_branch="$main_branch"
            else
                main_branch="$EXISTING_MAIN_BRANCH"
            fi
        else
            main_branch="$EXISTING_MAIN_BRANCH"
        fi
    else
        print_info "Detected main branch: $main_branch" "always"
    fi
    
    # Check if versioning features are enabled
    if [[ "$BOOTSTRAP_FEATURES" == "ai_only" ]]; then
        print_info "AI-only mode: Branch strategy is flexible" "always"
        export BOOTSTRAP_MAIN_BRANCH="$main_branch"
        export BOOTSTRAP_DEVELOP_BRANCH=""
        return 0
    fi
    
    print_info "\nVersioning requires a development branch for the Git Flow workflow." "always"
    
    # Enhanced develop branch detection - check local and remote for develop/dev
    local develop_branch_found=""
    local develop_location=""
    
    # Check local branches first
    if git show-ref --verify --quiet refs/heads/develop; then
        develop_branch_found="develop"
        develop_location="local"
        print_info "✓ Found 'develop' branch locally" "always"
    elif git show-ref --verify --quiet refs/heads/dev; then
        develop_branch_found="dev"
        develop_location="local"
        print_info "✓ Found 'dev' branch locally" "always"
    # Check remote branches if no local develop branch found
    elif git ls-remote --heads origin develop 2>/dev/null | grep -q develop; then
        develop_branch_found="develop"
        develop_location="remote"
        print_info "✓ Found 'develop' branch on remote" "always"
    elif git ls-remote --heads origin dev 2>/dev/null | grep -q dev; then
        develop_branch_found="dev"
        develop_location="remote"
        print_info "✓ Found 'dev' branch on remote" "always"
    fi
    
    # Show existing develop branch if available
    if [[ -n "$EXISTING_DEVELOP_BRANCH" ]]; then
        print_info "Current develop branch: $EXISTING_DEVELOP_BRANCH" "always"
        
        # Check if existing config matches what we found
        if [[ -n "$develop_branch_found" && "$EXISTING_DEVELOP_BRANCH" == "$develop_branch_found" ]]; then
            if [[ "$develop_location" == "remote" ]]; then
                print_info "Existing config matches remote branch '$develop_branch_found'" "always"
                echo -n "Check out remote '$develop_branch_found' branch locally? [Y/n]: "
                read -r checkout_remote
                if [[ ! "$checkout_remote" =~ ^[Nn]$ ]]; then
                    if git checkout -b "$develop_branch_found" "origin/$develop_branch_found" 2>/dev/null; then
                        print_success "✓ Checked out '$develop_branch_found' from remote"
                        git checkout - >/dev/null 2>&1
                    else
                        print_warning "Could not check out remote branch"
                    fi
                fi
            fi
            export BOOTSTRAP_DEVELOP_BRANCH="$EXISTING_DEVELOP_BRANCH"
            print_info "✓ Using existing develop branch: $EXISTING_DEVELOP_BRANCH" "always"
            export BOOTSTRAP_MAIN_BRANCH="$main_branch"
            return 0
        elif [[ -z "$develop_branch_found" ]]; then
            print_warning "Configuration shows '$EXISTING_DEVELOP_BRANCH' branch but it doesn't exist locally or remotely" "always"
            echo -n "Create missing '$EXISTING_DEVELOP_BRANCH' branch? [Y/n]: "
            read -r create_missing
            if [[ ! "$create_missing" =~ ^[Nn]$ ]]; then
                if git checkout -b "$EXISTING_DEVELOP_BRANCH" 2>/dev/null; then
                    print_success "✓ Created missing '$EXISTING_DEVELOP_BRANCH' branch"
                    export BOOTSTRAP_DEVELOP_BRANCH="$EXISTING_DEVELOP_BRANCH"
                    git checkout - >/dev/null 2>&1
                    export BOOTSTRAP_MAIN_BRANCH="$main_branch"
                    return 0
                else
                    print_warning "Could not create '$EXISTING_DEVELOP_BRANCH' branch"
                fi
            fi
        fi
    fi
    
    # Handle case where we found a develop branch but no existing config
    if [[ -n "$develop_branch_found" && -z "$EXISTING_DEVELOP_BRANCH" ]]; then
        if [[ "$develop_location" == "remote" ]]; then
            print_info "Found '$develop_branch_found' branch on remote" "always"
            echo -n "Check out and use remote '$develop_branch_found' branch? [Y/n]: "
            read -r use_remote
            if [[ ! "$use_remote" =~ ^[Nn]$ ]]; then
                if git checkout -b "$develop_branch_found" "origin/$develop_branch_found" 2>/dev/null; then
                    print_success "✓ Checked out '$develop_branch_found' from remote"
                    export BOOTSTRAP_DEVELOP_BRANCH="$develop_branch_found"
                    git checkout - >/dev/null 2>&1
                    export BOOTSTRAP_MAIN_BRANCH="$main_branch"
                    return 0
                else
                    print_warning "Could not check out remote branch"
                fi
            fi
        else
            # Local branch found
            export BOOTSTRAP_DEVELOP_BRANCH="$develop_branch_found"
            print_success "✓ Using existing local '$develop_branch_found' branch" "always"
            export BOOTSTRAP_MAIN_BRANCH="$main_branch"
            return 0
        fi
    fi
    
    # No develop branch found - inform user and offer to create one
    if [[ -z "$develop_branch_found" ]]; then
        print_warning "⚠ No development branch found (checked for 'develop' and 'dev' locally and remotely)" "always"
        print_info "\nMAIASS version management requires a development branch for proper Git Flow workflow." "always"
        print_info "This allows safe version bumping and merging between main and development branches." "always"
        echo ""
        echo "Would you like to:"
        echo "1) Create 'develop' branch (recommended for Git Flow)"
        echo "2) Create 'dev' branch (shorter alternative)"
        echo "3) Use current branch as development branch"
        echo "4) Skip branch setup (configure manually later)"
        echo -n "Enter choice [1-4, default: 1]: "
        read -r branch_choice
        
        case "$branch_choice" in
            2)
                # Create dev branch
                if git checkout -b dev 2>/dev/null; then
                    print_success "✓ Created 'dev' branch"
                    export BOOTSTRAP_DEVELOP_BRANCH="dev"
                    git checkout - >/dev/null 2>&1
                else
                    print_warning "Could not create 'dev' branch"
                    export BOOTSTRAP_DEVELOP_BRANCH=""
                fi
                ;;
            3)
                local current_branch
                if git rev-parse --verify HEAD >/dev/null 2>&1; then
                    current_branch=$(git rev-parse --abbrev-ref HEAD)
                else
                    current_branch=$(git symbolic-ref --short HEAD 2>/dev/null || echo "main")
                fi
                export BOOTSTRAP_DEVELOP_BRANCH="$current_branch"
                print_info "✓ Using '$current_branch' as development branch" "always"
                ;;
            4)
                export BOOTSTRAP_DEVELOP_BRANCH=""
                print_warning "Branch setup skipped - you'll need to configure manually" "always"
                print_info "Note: Version management may not work properly without a development branch" "always"
                ;;
            *)
                # Create develop branch (default)
                if git checkout -b develop 2>/dev/null; then
                    print_success "✓ Created 'develop' branch"
                    export BOOTSTRAP_DEVELOP_BRANCH="develop"
                    git checkout - >/dev/null 2>&1
                else
                    print_warning "Could not create 'develop' branch"
                    export BOOTSTRAP_DEVELOP_BRANCH=""
                fi
                ;;
        esac
    fi
    
    export BOOTSTRAP_MAIN_BRANCH="$main_branch"
    
    print_success "✓ Branch strategy configured" "always"
    print_info "  Main: $main_branch" "always"
    if [[ -n "$BOOTSTRAP_DEVELOP_BRANCH" ]]; then
        print_info "  Develop: $BOOTSTRAP_DEVELOP_BRANCH" "always"
    fi
}

# Step 6: Save all configuration to .env.maiass
save_bootstrap_config() {
    print_section "💾 Saving Configuration"
    
    # Create .env.maiass with all settings
    cat > .env.maiass << EOF
# MAIASS Configuration
# Generated by bootstrap on $(date)

# Project Type
MAIASS_REPO_TYPE=${BOOTSTRAP_PROJECT_TYPE:-bespoke}
EOF
    
    # Add WordPress-specific settings
    if [[ "$BOOTSTRAP_PROJECT_TYPE" == "wordpress" ]]; then
        cat >> .env.maiass << EOF

# WordPress Configuration
MAIASS_WP_FILES_PATH=${BOOTSTRAP_WP_PATH:-.}
EOF
        
        if [[ -n "$BOOTSTRAP_WP_TYPE" ]]; then
            echo "# WordPress type: $BOOTSTRAP_WP_TYPE" >> .env.maiass
        fi
    fi
    
    # Add version configuration
    if [[ -n "$BOOTSTRAP_VERSION_SOURCE" ]]; then
        cat >> .env.maiass << EOF

# Version Management
MAIASS_VERSION_PRIMARY_FILE=${BOOTSTRAP_VERSION_SOURCE}
EOF
    fi
    
    # Add branch configuration
    if [[ -n "$BOOTSTRAP_MAIN_BRANCH" ]]; then
        cat >> .env.maiass << EOF

# Branch Strategy
MAIASS_MAINBRANCH=${BOOTSTRAP_MAIN_BRANCH}
EOF
    fi
    
    if [[ -n "$BOOTSTRAP_DEVELOP_BRANCH" ]]; then
        echo "MAIASS_DEVELOPBRANCH=${BOOTSTRAP_DEVELOP_BRANCH}" >> .env.maiass
    fi
    
    # Add feature configuration
    case "$BOOTSTRAP_FEATURES" in
        "ai_only")
            cat >> .env.maiass << EOF

# Features: AI commits only
MAIASS_MODE=ai_only
EOF
            ;;
        "versioning_only")
            cat >> .env.maiass << EOF

# Features: Versioning without changelog
# (changelog generation disabled)
EOF
            ;;
        *)
            cat >> .env.maiass << EOF

# Features: Full workflow (default)
# Includes versioning, changelog, and AI commits
EOF
            ;;
    esac
    
    # Add common settings
    cat >> .env.maiass << EOF

# AI Configuration (optional)
# MAIASS_AI_MODE=ask
# MAIASS_AI_TOKEN=your_token_here

# Verbosity (brief, normal, debug)
MAIASS_VERBOSITY=brief

# Enable logging
MAIASS_LOGGING=true
EOF
    
    print_success "✓ Configuration saved to .env.maiass"
    
    # Handle .gitignore
    if [[ "$BOOTSTRAP_ADD_TO_GITIGNORE" == "true" ]]; then
        add_env_to_gitignore
    fi
}

add_env_to_gitignore() {
    local gitignore_file=".gitignore"
    
    # Check if .env.maiass is already in .gitignore
    if [[ -f "$gitignore_file" ]] && grep -q "^\.env\.maiass$" "$gitignore_file" 2>/dev/null; then
        print_info "✓ .env.maiass already in .gitignore"
        return 0
    fi
    
    # Add to .gitignore
    if [[ ! -f "$gitignore_file" ]]; then
        echo "# MAIASS environment file" > "$gitignore_file"
        echo ".env.maiass" >> "$gitignore_file"
        print_success "✓ Created .gitignore and added .env.maiass"
    else
        echo "" >> "$gitignore_file"
        echo "# MAIASS environment file" >> "$gitignore_file"
        echo ".env.maiass" >> "$gitignore_file"
        print_success "✓ Added .env.maiass to .gitignore"
    fi
}

fi # __SRC__Volumes_enigmadev_enigmadev_static_maiass_whole_bashmaiass_lib_core_bootstrap_sh
# --- End inlined: /Volumes/enigmadev/enigmadev/static/maiass-whole/bashmaiass/lib/core/bootstrap.sh ---

# --- Begin inlined: /Volumes/enigmadev/enigmadev/static/maiass-whole/bashmaiass/lib/core/ai.sh ---
if [[ -z "${__SRC__Volumes_enigmadev_enigmadev_static_maiass_whole_bashmaiass_lib_core_ai_sh:-}" ]]; then __SRC__Volumes_enigmadev_enigmadev_static_maiass_whole_bashmaiass_lib_core_ai_sh=1

function get_ai_commit_message_style() {

  # Determine the OpenAI commit message style
  if [[ -n "$MAIASS_AI_COMMIT_MESSAGE_STYLE" ]]; then
    ai_commit_style="$MAIASS_AI_COMMIT_MESSAGE_STYLE"
    print_debug "Using AI commit style: $ai_commit_style" >&2
  elif [[ -f ".maiass.prompt" ]]; then
    ai_commit_style="custom"
    print_debug "No style set in .env; using local prompt file: .maiass.prompt" >&2
  elif [[ -f "$HOME/.maiass.prompt" ]]; then
    ai_commit_style="global_custom"
    print_debug "No style set in .env.m; using global prompt file: ~/.maiass.prompt" >&2
  else
    ai_commit_style="bullet"
    print_debug "No style or prompt files found; defaulting to 'bullet'" >&2
  fi
  export ai_commit_style
}

# Function to handle invalid API key errors with user options
function handle_invalid_api_key_error() {
  echo ""
  print_warning "❌ Invalid API Key" >&2
  echo ""
  print_info "Your MAIASS AI token is invalid or has expired." >&2
  
  # Check if we should automatically create anonymous subscription
  if [[ "$ai_invalid_token_choices" == "false" ]]; then
    # Check if we already tried to create anonymous subscription this session
    if [[ "$_MAIASS_ANON_ATTEMPTED" == "true" ]]; then
      print_warning "Anonymous subscription already attempted this session. Continuing without AI assistance." >&2
      export ai_mode="off"
      return 1
    fi
    
    print_info "Automatically creating anonymous subscription..." >&2
    export _MAIASS_ANON_ATTEMPTED="true"
    
    if create_anonymous_subscription; then
      print_info "Retrying AI commit message generation..." >&2
      echo ""
      # Return success to indicate retry should happen in calling context
      return 0
    else
      print_warning "Failed to create anonymous subscription. Continuing without AI assistance." >&2
      export ai_mode="off"
      return 1
    fi
  fi
  
  print_info "You have the following options:" >&2
  echo ""
  print_info "  ${BCyan}1.${Color_Off} Enter a new AI token" >&2
  print_info "  ${BCyan}2.${Color_Off} Continue without AI and enter commit message manually ${BYellow}[Default]${Color_Off}" >&2  
  print_info "  ${BCyan}3.${Color_Off} Get a new anonymous token (no email required)" >&2
  print_info "  ${BCyan}4.${Color_Off} Exit and configure token later" >&2
  echo ""
  print_info "💡 To get a token:" >&2
  print_info "   • Email signup: ${BBlue}https://maiass.net/signup${Color_Off} (free trial)" >&2
  #print_info "   • Anonymous: Option 3 above (machine fingerprint-based)" >&2
  echo ""
  
  # Only prompt if in interactive mode
  if [[ -t 0 ]]; then
    print_info "Please choose an option (1-4) [2]: " >&2
    read -r user_choice
    
    case "${user_choice:-2}" in
      1)
        echo ""
        print_info "Please enter your new AI token (input will be hidden): " >&2
        if read -s new_token; then
          if [[ -n "$new_token" && "$new_token" != "DISABLED" ]]; then
            # Store the new token securely
            if [[ "$OSTYPE" == "darwin"* ]]; then
              security add-generic-password -a "MAIASS_AI_TOKEN" -s "maiass" -w "$new_token" -U 2>/dev/null
            elif command -v secret-tool >/dev/null 2>&1; then
              echo -n "$new_token" | secret-tool store --label="MAIASS AI Token" service maiass key "MAIASS_AI_TOKEN"
            fi
            
            export MAIASS_AI_TOKEN="$new_token"
            export ai_token="$new_token"
            print_success "✅ New AI token stored successfully." >&2
            print_info "Retrying AI commit message generation..." >&2
            echo ""
            
            # Return success to indicate retry should happen in calling context
            return 0
          else
            print_warning "No valid token provided. Continuing without AI assistance." >&2
          fi
        else
          print_warning "Failed to read token. Continuing without AI assistance." >&2
        fi
        ;;
      2)
        print_info "Continuing without AI assistance. You'll be prompted to enter your commit message manually." >&2
        ;;
      3)
        echo ""
        print_info "Creating anonymous subscription..." >&2
        if create_anonymous_subscription; then
          print_info "Retrying AI commit message generation..." >&2
          echo ""
          # Return success to indicate retry should happen in calling context
          return 0
        else
          print_warning "Failed to create anonymous subscription. Continuing without AI assistance." >&2
        fi
        ;;
      4)
        print_info "Exiting. Configure your AI token with: export MAIASS_AI_TOKEN=\"your_token_here\"" >&2
        exit 1
        ;;
      *)
        print_warning "Invalid option. Continuing without AI assistance." >&2
        ;;
    esac
  else
    print_info "Non-interactive mode detected. Continuing without AI assistance." >&2
  fi
  
  # Set AI mode to off for this session to avoid repeated prompts
  export ai_mode="off"
}

# Function to create an anonymous subscription using machine fingerprint
function create_anonymous_subscription() {
  local machine_fingerprint
  local api_response
  local new_api_key
  local credits
  local top_up_url
  
  print_debug "DEBUG: ========== ANONYMOUS SUBSCRIPTION START ==========" >&2
  print_info "Generating machine fingerprint..." >&2
  
  # Generate machine fingerprint (use existing function from utils.sh)
  if command -v generate_machine_fingerprint >/dev/null 2>&1; then
    print_debug "DEBUG: Using generate_machine_fingerprint function" >&2
    machine_fingerprint=$(generate_machine_fingerprint)
  else
    print_debug "DEBUG: Using fallback machine fingerprint generation" >&2
    # Fallback fingerprint generation
    machine_fingerprint=$(echo -n "$(uname -a)-$(whoami)-$(date +%Y%m)" | shasum -a 256 | cut -d' ' -f1)
    print_debug "DEBUG: Using fallback machine fingerprint: ${machine_fingerprint:0:10}..." >&2
  fi
  
  if [[ -z "$machine_fingerprint" ]]; then
    print_warning "Failed to generate machine fingerprint." >&2
    return 1
  fi
  
  print_debug "DEBUG: Machine fingerprint: ${machine_fingerprint:0:10}..." >&2
  
  # Create JSON payload for anonymous subscription
  local json_payload
  if command -v jq >/dev/null 2>&1; then
    print_debug "DEBUG: Creating JSON payload with jq" >&2
    json_payload=$(jq -n --arg fingerprint "$machine_fingerprint" '{
      "machine_fingerprint": $fingerprint
    }')
  else
    print_debug "DEBUG: Creating JSON payload manually" >&2
    json_payload="{\"machine_fingerprint\":\"$machine_fingerprint\"}"
  fi
  
  print_debug "DEBUG: JSON payload: $json_payload" >&2
  print_info "Requesting anonymous subscription..." >&2
  
  # Call the anonymous subscription endpoint
  print_debug "DEBUG: Calling ${maiass_tokenrequest}" >&2
  api_response=$(curl -s -X POST "${maiass_tokenrequest}" \
    -H "Content-Type: application/json" \
    -H "X-Client-Name: ${client_name:-bashmaiass}" \
    -H "X-Client-Version: ${client_version:-0.0.0}" \
    -d "$json_payload" 2>/dev/null)
  
  print_debug "DEBUG: Anonymous subscription response: $api_response" >&2
  
  if [[ -n "$api_response" ]]; then
    # Check for errors
    if echo "$api_response" | grep -q '"error"'; then
      local error_msg
      error_msg=$(echo "$api_response" | grep -o '"error":"[^"]*"' | sed 's/"error":"//' | sed 's/"$//' | head -1)
      print_warning "Failed to create anonymous subscription: $error_msg" >&2
      return 1
    fi
    
    # Extract the API key and other details
    if command -v jq >/dev/null 2>&1; then
      new_api_key=$(echo "$api_response" | jq -r '.apiKey // .api_key // .token // empty' 2>/dev/null)
      local subscription_id=$(echo "$api_response" | jq -r '.id // .subscription_id // empty' 2>/dev/null)
      credits=$(echo "$api_response" | jq -r '.creditsRemaining // .credits_remaining // .credits // empty' 2>/dev/null)
      top_up_url=$(echo "$api_response" | jq -r '.purchaseUrl // .payment_url // .top_up_url // empty' 2>/dev/null)
    else
      new_api_key=$(echo "$api_response" | grep -o '"token":"[^"]*"' | sed 's/"token":"//' | sed 's/"$//' | head -1)
      if [[ -z "$new_api_key" ]]; then
        new_api_key=$(echo "$api_response" | grep -o '"api_key":"[^"]*"' | sed 's/"api_key":"//' | sed 's/"$//' | head -1)
      fi
      local subscription_id=$(echo "$api_response" | grep -o '"subscription_id":"[^"]*"' | sed 's/"subscription_id":"//' | sed 's/"$//' | head -1)
      credits=$(echo "$api_response" | grep -o '"credits_remaining":[0-9]*' | sed 's/"credits_remaining"://' | head -1)
      if [[ -z "$credits" ]]; then
        credits=$(echo "$api_response" | grep -o '"credits":[0-9]*' | sed 's/"credits"://' | head -1)
      fi
      top_up_url=$(echo "$api_response" | grep -o '"payment_url":"[^"]*"' | sed 's/"payment_url":"//' | sed 's/"$//' | head -1)
      if [[ -z "$top_up_url" ]]; then
        top_up_url=$(echo "$api_response" | grep -o '"top_up_url":"[^"]*"' | sed 's/"top_up_url":"//' | sed 's/"$//' | head -1)
      fi
    fi
    
    if [[ -n "$new_api_key" && "$new_api_key" != "null" ]]; then
      print_success "✅ Anonymous subscription created successfully!" >&2
      print_info "   API Key: $(mask_api_key "$new_api_key")" >&2
      print_info "   Credits: ${credits:-N/A}" >&2
      
      if [[ -n "$subscription_id" && "$subscription_id" != "null" ]]; then
        print_info "   Subscription ID: ${subscription_id:0:12}..." >&2
      fi
      
      if [[ -z "$credits" || "$credits" == "0" ]]; then
        print_warning "⚠️  Your anonymous API key has zero credits. Please purchase credits to use AI features." >&2
        if [[ -n "$top_up_url" && "$top_up_url" != "null" ]]; then
          print_info "   Purchase credits here: $top_up_url" >&2
        fi
      fi
      
      # Store the token, subscription ID, and top-up URL securely
      if [[ "$OSTYPE" == "darwin"* ]]; then
        security add-generic-password -a "MAIASS_AI_TOKEN" -s "maiass" -w "$new_api_key" -U 2>/dev/null
        if [[ -n "$subscription_id" && "$subscription_id" != "null" ]]; then
          security add-generic-password -a "MAIASS_SUBSCRIPTION_ID" -s "maiass" -w "$subscription_id" -U 2>/dev/null
        fi
      elif command -v secret-tool >/dev/null 2>&1; then
        echo -n "$new_api_key" | secret-tool store --label="MAIASS AI Token" service maiass key "MAIASS_AI_TOKEN"
        if [[ -n "$subscription_id" && "$subscription_id" != "null" ]]; then
          echo -n "$subscription_id" | secret-tool store --label="MAIASS Subscription ID" service maiass key "MAIASS_SUBSCRIPTION_ID"
        fi
      fi
      
      export MAIASS_AI_TOKEN="$new_api_key"
      export ai_token="$new_api_key"
      if [[ -n "$subscription_id" && "$subscription_id" != "null" ]]; then
        export MAIASS_SUBSCRIPTION_ID="$subscription_id"
      fi
      
      echo ""
      return 0
    else
      print_warning "Failed to extract API key from response." >&2
      return 1
    fi
  else
    print_warning "No response from anonymous subscription service." >&2
    return 1
  fi
}

# Function to handle quota exceeded errors
function handle_quota_exceeded_error() {
  local error_msg="$1"
  local payment_url="$2"
  local credits_remaining="$3"
  
  echo ""
  print_warning "💳 Quota Exceeded" >&2
  echo ""
  print_info "${Red}Your AI token quota has been exceeded.${Color_Reset}" >&2
  if [[ -n "$error_msg" ]]; then
    print_debug "Details: $error_msg" >&2
  fi
  if [[ -n "$credits_remaining" && "$credits_remaining" != "null" ]]; then
    print_info "$(print_credit_color "$credits_remaining" "Credits remaining: $credits_remaining")" >&2
  fi
  print_info "💡 To manage your quota:" >&2
  
  # Use payment URL from proxy response if available, otherwise use stored subscription ID or fallback
  if [[ -n "$payment_url" && "$payment_url" != "null" ]]; then
    print_info "Add credits: ${BBlue}$payment_url${Color_Off}" >&2
  elif [[ -n "$MAIASS_SUBSCRIPTION_ID" ]]; then
    print_info "Add credits: ${BBlue}https://maiass.net/top-up/$MAIASS_SUBSCRIPTION_ID${Color_Off}" >&2
  else
    print_info "Visit: ${BBlue}https://maiass.net/${Color_Off} for subscription options" >&2
  fi

  print_info "${BYellow}You have the following options (1-3):" >&2
  echo ""
  print_info "  ${BCyan}1.${Color_Off} Continue without AI and enter commit message manually ${BYellow}[Default]${Color_Off}" >&2
  print_info "  ${BCyan}2.${Color_Off} Enter a different AI token" >&2
  print_info "  ${BCyan}3.${Color_Off} Exit and manage your subscription" >&2
  echo ""

  # Only prompt if in interactive mode
  if [[ -t 0 ]]; then
    read -r user_choice
    
    case "${user_choice:-1}" in
      1)
        print_info "Continuing without AI assistance. You'll be prompted to enter your commit message manually." >&2
        exit 1
        ;;
      # 2)
      #   echo ""
      #   print_info "Creating new anonymous subscription..." >&2
      #   if create_anonymous_subscription; then
      #     print_info "Retrying AI commit message generation..." >&2
      #     echo ""
      #     # Return success to indicate retry should happen in calling context
      #     return 0
      #   else
      #     print_warning "Failed to create anonymous subscription. Continuing without AI assistance." >&2
      #   fi
      #   ;;
      2)
        echo ""
        print_info "Please enter your new AI token (input will be hidden): " >&2
        if read -s new_token; then
          if [[ -n "$new_token" && "$new_token" != "DISABLED" ]]; then
            # Store the new token securely
            if [[ "$OSTYPE" == "darwin"* ]]; then
              security add-generic-password -a "MAIASS_AI_TOKEN" -s "maiass" -w "$new_token" -U 2>/dev/null
            elif command -v secret-tool >/dev/null 2>&1; then
              echo -n "$new_token" | secret-tool store --label="MAIASS AI Token" service maiass key "MAIASS_AI_TOKEN"
            fi
            
            export MAIASS_AI_TOKEN="$new_token"
            export ai_token="$new_token"
            print_success "✅ New AI token stored successfully." >&2
            print_info "Retrying AI commit message generation..." >&2
            echo ""
            
            # Return success to indicate retry should happen in calling context
            return 0
          else
            print_warning "No valid token provided. Continuing without AI assistance." >&2
          fi
        else
          print_warning "Failed to read token. Continuing without AI assistance." >&2
        fi
        ;;
      3)
        print_info "Exiting. Visit https://maiass.net to manage your subscription." >&2
        kill -TERM $$
        ;;
      *)
        print_warning "Invalid option. Continuing without AI assistance." >&2
        ;;
    esac
  else
    print_info "Non-interactive mode detected. Continuing without AI assistance." >&2
  fi
  
  # Set AI mode to off for this session to avoid repeated prompts
  export ai_mode="off"
}

# Function to get AI-generated commit message suggestion
function get_ai_commit_suggestion() {
  local git_diff
  local ai_prompt
  local api_response
  local suggested_message
  local retry_count=0
  local max_retries=2

  # Check if we need to create an anonymous token (set by envars.sh)
  if [[ "$_MAIASS_NEED_ANON_TOKEN" == "true" ]]; then
    print_debug "DEBUG: Anonymous token creation requested from environment loading" >&2
    
    # Clear the flag to prevent repeated attempts
    export _MAIASS_NEED_ANON_TOKEN=""
    
    if create_anonymous_subscription; then
      print_info "Anonymous subscription created successfully. Proceeding with AI commit suggestion..." >&2
      # Token should now be set, continue with normal flow
    else
      print_warning "Failed to create anonymous subscription. AI features will be disabled." >&2
      return 1
    fi
  fi

  # Main retry loop for handling authentication errors
  while [[ $retry_count -lt $max_retries ]]; do
    retry_count=$((retry_count + 1))
    print_debug "DEBUG: AI suggestion attempt $retry_count/$max_retries" >&2
    
    # Reset suggested_message for each attempt
    suggested_message=""
    
    if _make_ai_api_call; then
      # Success - return the result
      return 0
    else
      local exit_code=$?
      if [[ $exit_code -eq 2 && $retry_count -lt $max_retries ]]; then
        # Exit code 2 indicates retry should happen (new credentials available)
        print_debug "DEBUG: Retrying API call with new credentials..." >&2
        continue
      else
        # Real failure or max retries reached
        return 1
      fi
    fi
  done
  
  # If we get here, we've exhausted retries
  return 1
}

# Internal function to make the actual API call
function _make_ai_api_call() {
  local git_diff
  local ai_prompt
  local api_response
  local suggested_message

bullet_prompt="Analyze the following git diff and create a commit message with bullet points. Format as:
'Brief summary title
  - feat: add user authentication
  - fix(api): resolve syntax error
  - docs: update README'

Use past tense verbs. No blank line between title and bullets. Keep concise. Do not wrap the response in quotes.

Git diff:
\$git_diff"

conventional_prompt="Analyze the following git diff and suggest a commit message using conventional commit format (type(scope): description). Examples: 'feat: add user authentication', 'fix(api): resolve null pointer exception', 'docs: update README'. Keep it concise.

Git diff:
\$git_diff"

simple_prompt="Analyze the following git diff and suggest a concise, descriptive commit message. Keep it under 50 characters for the first line, with additional details on subsequent lines if needed.

Git diff:
\$git_diff"

  # Debug test - this should always show if debug is enabled
  # For backward compatibility, treat debug_mode=true as verbosity_level=debug
  if [[ "$debug_mode" == "true" && "$verbosity_level" != "debug" ]]; then
    # Only log this when not already in debug verbosity to avoid noise
    log_message "DEPRECATED: Using debug_mode=true is deprecated. Please use MAIASS_VERBOSITY=debug instead."
    print_debug "DEBUG: AI function called with debug_mode=$debug_mode (deprecated, use MAIASS_VERBOSITY=debug instead)" "debug" >&2
    print_debug "DEBUG: MAIASS_DEBUG=$MAIASS_DEBUG" "debug" >&2
  elif [[ "$verbosity_level" == "debug" ]]; then
    print_debug "DEBUG: AI function called with verbosity_level=$verbosity_level" "debug" >&2
  fi

  # Debug: Show current AI configuration
  print_debug "DEBUG: ========== AI COMMIT SUGGESTION START ==========" >&2
  print_debug "DEBUG: ai_mode=$ai_mode" >&2
  print_debug "DEBUG: ai_token=${ai_token:0:10}${ai_token:+...}" >&2
  print_debug "DEBUG: maiass_host=$maiass_host" >&2
  print_debug "DEBUG: maiass_endpoint=$maiass_endpoint" >&2
  print_debug "DEBUG: ai_model=$ai_model" >&2
  print_debug "DEBUG: ai_temperature=$ai_temperature" >&2

  # Get git diff for context (handle empty repository case)
  if git rev-parse --verify HEAD >/dev/null 2>&1; then
    git_diff=$(git diff --cached --no-color 2>/dev/null || git diff --no-color 2>/dev/null || echo "No changes detected")
  else
    # For empty repository, show all staged files as new
    git_diff=$(git diff --cached --no-color 2>/dev/null || echo "Initial commit - all files are new")
  fi
  git_diff=$(echo "$git_diff" | tr -cd '\11\12\15\40-\176')
  print_debug "DEBUG: Git diff length: ${#git_diff} characters" >&2

  # Truncate diff if too long (API has token limits)
  if [[ ${#git_diff} -gt $ai_max_characters ]]; then
    git_diff="${git_diff:0:$ai_max_characters}...[truncated]"
    print_debug "DEBUG: Git diff truncated to $ai_max_characters characters" >&2
  fi
    print_debug "DEBUG: prompt mode: $ai_commit_style" >&2
  get_ai_commit_message_style
  # Create AI prompt based on commit style
  case "$ai_commit_style" in
  "bullet")
    ai_prompt="${bullet_prompt//\$git_diff/$git_diff}"
    ;;
  "conventional")
    ai_prompt="${conventional_prompt//\$git_diff/$git_diff}"
    ;;
  "simple")
    ai_prompt="${simple_prompt//\$git_diff/$git_diff}"
    ;;
    "custom")
    if [[ -f ".maiass.prompt" ]]; then
      custom_prompt=$(<.maiass.prompt)
      if [[ -n "$custom_prompt" && "$custom_prompt" == *"\$git_diff"* ]]; then
        ai_prompt="${custom_prompt//\$git_diff/$git_diff}"
      else
        print_warning ".maiass.prompt is missing or does not include \$git_diff. Using Bullet format." >&2
        ai_prompt="${bullet_prompt//\$git_diff/$git_diff}"
      fi
    else
      print_warning "Style 'custom' selected but .maiass.prompt not found. Using Bullet format." >&2
      ai_prompt="${bullet_prompt//\$git_diff/$git_diff}"
    fi
    ;;
  "global_custom")
    if [[ -f "$HOME/.maiass.prompt" ]]; then
      custom_prompt=$(<"$HOME/.maiass.prompt")
      if [[ -n "$custom_prompt" && "$custom_prompt" == *"\$git_diff"* ]]; then
        ai_prompt="${custom_prompt//\$git_diff/$git_diff}"
      else
        print_warning "$HOME/.maiass.prompt is missing or does not include \$git_diff. Using Bullet format." >&2
        ai_prompt="${bullet_prompt//\$git_diff/$git_diff}"
      fi
    else
      print_warning "Style 'global_custom' selected but $HOME/.maiass.prompt not found. Using Bullet format." >&2
      ai_prompt="${bullet_prompt//\$git_diff/$git_diff}"
    fi
    ;;

  *)
    print_warning "Unknown commit message style: '$ai_commit_style'. Skipping AI suggestion." >&2
    ai_prompt="${bullet_prompt//\$git_diff/$git_diff}"
    ;;
esac

  # Call OpenAI API
  print_debug "DEBUG: Calling OpenAI API with model: $ai_model" >&2
  print_debug "DEBUG: AI prompt style: $ai_commit_style" >&2
  print_debug "AI temperature: $ai_temperature"  >&2

  # Build JSON payload using jq if available (handles escaping automatically)
  local json_payload
  if command -v jq >/dev/null 2>&1; then
    # Ensure temperature is a number for jq
    local temp_num
    temp_num=$(echo "$ai_temperature" | grep -E '^[0-9]*\.?[0-9]+$' || echo "0.7")
    json_payload=$(jq -n --arg model "$ai_model" --argjson temperature "$temp_num" --arg prompt "$ai_prompt" '{
      "model": $model,
      "messages": [
        {"role": "system", "content": "You are a helpful assistant that writes concise, descriptive git commit messages based on code changes."},
        {"role": "user", "content": $prompt}
      ],
      "max_tokens": 150,
      "temperature": $temperature
    }')
  else
    # Simple fallback - replace quotes and newlines only
    local safe_prompt
    safe_prompt=$(printf '%s' "$ai_prompt" | sed 's/"/\\"/g' | tr '\n' ' ')
    json_payload='{"model":"'$ai_model'","messages":[{"role":"system","content":"You are a helpful assistant that writes concise, descriptive git commit messages based on code changes."},{"role":"user","content":"'$safe_prompt'"}],"max_tokens":150,"temperature":'${ai_temperature:-0.7}'}'
  fi

  print_debug "DEBUG: JSON payload length: ${#json_payload} characters" >&2
  print_debug "DEBUG: endpoint: ${maiass_endpoint}" >&2
  print_debug "DEBUG: About to make API call..." >&2
  
  # Make API call and capture both response and HTTP status
  local http_response
  print_debug "DEBUG: Executing curl to $maiass_endpoint" >&2
  print_debug "DEBUG: curl command: curl -s -w \"\\n%{http_code}\" -X POST \"$maiass_endpoint\" -H \"Content-Type: application/json\" -H \"Authorization: Bearer ${ai_token:0:10}...\" -d \"[JSON_PAYLOAD]\"" >&2
  
  # Check if this is an anonymous token and include machine fingerprint header
  local curl_headers=()
  curl_headers+=("-H" "Content-Type: application/json")
  curl_headers+=("-H" "Authorization: Bearer $ai_token")
  # Always send client identity/version for min-version enforcement and analytics
  curl_headers+=("-H" "X-Client-Name: ${client_name:-bashmaiass}")
  curl_headers+=("-H" "X-Client-Version: ${client_version:-0.0.0}")
  
  if [[ "$ai_token" == anon_* ]]; then
    print_debug "DEBUG: Anonymous token detected, adding machine fingerprint header" >&2
    # Generate the same machine fingerprint we used for subscription
    local machine_fingerprint
    if command -v generate_machine_fingerprint >/dev/null 2>&1; then
      machine_fingerprint=$(generate_machine_fingerprint)
      print_debug "DEBUG: Added machine fingerprint header: ${machine_fingerprint:0:10}..." >&2
    else
      machine_fingerprint=$(echo -n "$(uname -a)-$(whoami)-$(date +%Y)" | shasum -a 256 | cut -d' ' -f1)
      print_debug "DEBUG: Added machine fingerprint header using falback: ${machine_fingerprint:0:10}..." >&2
    fi
    curl_headers+=("-H" "X-Machine-Fingerprint: $machine_fingerprint")
  fi
  
  http_response=$(curl -s -w "\n%{http_code}" -X POST "$maiass_endpoint" \
    "${curl_headers[@]}" \
    -d "$json_payload" 2>&1)
  
  local curl_exit_code=$?
  print_debug "DEBUG: curl exit code: $curl_exit_code" >&2
  
  print_debug "DEBUG: curl completed, processing response..." >&2
  
  # Split response and status code using more portable method
  local http_status
  http_status=$(echo "$http_response" | tail -n 1)
  local api_response
  # Use sed to remove last line instead of head -n -1 (which doesn't work on macOS)
  api_response=$(echo "$http_response" | sed '$d')
  
  print_debug "DEBUG: HTTP Status: $http_status" >&2
  print_debug "DEBUG: Response length: ${#api_response} characters" >&2
  print_debug "DEBUG: Raw API response: ${api_response:0:200}${api_response:+...}" >&2
  print_debug "DEBUG: Full curl response: $http_response" >&2
  
  print_debug "DEBUG: API token: $(mask_api_key "${ai_token}") " >&2

  # Extract the suggested message from API response
  if [[ -n "$api_response" ]]; then
    print_debug "DEBUG: Processing API response..." >&2
  else
    print_debug "DEBUG: Empty API response detected" >&2
    if [[ "$curl_exit_code" -ne 0 ]]; then
      print_error "curl command failed with exit code $curl_exit_code" >&2
      print_debug "DEBUG: Check if maiass-proxy is running at $maiass_endpoint" >&2
      return 1
    elif [[ "$http_status" == "000" ]]; then
      print_error "Connection failed - check if maiass-proxy is running at $maiass_endpoint" >&2
      return 1
    else
      print_warning "Empty response with HTTP status $http_status" >&2
    fi
  fi
  
  if [[ -n "$api_response" ]]; then
    print_debug "DEBUG: Processing API response..." >&2
    # Check HTTP status code first
    case "$http_status" in
      401)
        print_debug "DEBUG: HTTP 401 - Invalid API key" >&2
        if handle_invalid_api_key_error; then
          # Error handler indicates we should retry with new credentials
          return 2
        else
          return 1
        fi
        ;;
      402)
        print_debug "DEBUG: HTTP 402 - Quota exceeded" >&2
        # Extract payment URL and other details from 402 response
        local payment_url=""
        local credits_remaining=""
        if command -v jq >/dev/null 2>&1; then
          payment_url=$(echo "$api_response" | jq -r '.error.payment_url // empty' 2>/dev/null)
          credits_remaining=$(echo "$api_response" | jq -r '.error.credits_remaining // empty' 2>/dev/null)
        else
          payment_url=$(echo "$api_response" | grep -o '"payment_url":"[^"]*"' | sed 's/"payment_url":"//' | sed 's/"$//' | head -1)
          credits_remaining=$(echo "$api_response" | grep -o '"credits_remaining":[0-9]*' | sed 's/"credits_remaining"://' | head -1)
        fi
        print_debug "DEBUG: Extracted payment_url=$payment_url, credits_remaining=$credits_remaining" >&2
        if handle_quota_exceeded_error "Token quota exceeded (HTTP 402)" "$payment_url" "$credits_remaining"; then
          # Error handler indicates we should retry with new credentials
          return 2
        else
          return 1
        fi
        ;;
      403)
        print_debug "DEBUG: HTTP 403 - Forbidden" >&2
        # Check if this is an invalid API key error in disguise
        if echo "$api_response" | grep -q '"code":"invalid_api_key"'; then
          print_debug "DEBUG: HTTP 403 contains invalid_api_key error code" >&2
          if handle_invalid_api_key_error; then
            # Error handler indicates we should retry with new credentials
            return 2
          else
            return 1
          fi
        else
          print_warning "Access forbidden. Check your API key permissions." >&2
          print_debug "DEBUG: HTTP 403 response: $api_response" >&2
          return 1
        fi
        ;;
      429)
        print_debug "DEBUG: HTTP 429 - Rate limit exceeded" >&2
        print_warning "Rate limit exceeded. Please try again later." >&2
        print_debug "DEBUG: HTTP 429 response: $api_response" >&2
        return 1
        ;;
      5*)
        print_debug "DEBUG: HTTP $http_status - Server error" >&2
        print_warning "AI service temporarily unavailable (HTTP $http_status). Please try again later." >&2
        print_debug "DEBUG: HTTP $http_status response: $api_response" >&2
        return 1
        ;;
    esac
    
    # Check for API error in JSON response
    print_debug "DEBUG: Checking for JSON errors in response..." >&2
    if echo "$api_response" | grep -q '"error"'; then
      print_debug "DEBUG: Found error in JSON response" >&2
      error_msg=$(echo "$api_response" | grep -o '"message":"[^"]*"' | sed 's/"message":"//' | sed 's/"$//' | head -1)
      error_code=$(echo "$api_response" | grep -o '"code":"[^"]*"' | sed 's/"code":"//' | sed 's/"$//' | head -1)
      
      print_debug "DEBUG: JSON error_code=$error_code, error_msg=$error_msg" >&2
      
      # Handle specific error types
      case "$error_code" in
        "invalid_api_key")
          print_debug "DEBUG: JSON error - invalid_api_key" >&2
          if handle_invalid_api_key_error; then
            # Error handler indicates we should retry with new credentials
            return 2
          else
            return 1
          fi
          ;;
        "quota_exceeded"|"insufficient_quota"|"insufficient_credit")
          print_debug "DEBUG: JSON error - quota/credit issue" >&2
          # Skip handling here since HTTP 402 already handled quota exceeded
          # This prevents the double prompt issue
          print_debug "DEBUG: Quota error already handled by HTTP status code, skipping duplicate handling" >&2
          return 1
          ;;
        *)
          print_warning "API Error: $error_msg" >&2
          if [[ -n "$error_code" ]]; then
            print_debug "DEBUG: Error code: $error_code" >&2
          fi
          print_debug "DEBUG: Full error response: $api_response" >&2
          return 1
          ;;
      esac
    fi

    print_debug "DEBUG: Attempting to parse JSON response" >&2

    # Try jq first if available (most reliable)
    if command -v jq >/dev/null 2>&1; then
      print_debug "DEBUG: Using jq for JSON parsing" >&2
      suggested_message=$(echo "$api_response" | jq -r '.choices[0].message.content // empty' 2>/dev/null)
      print_debug "DEBUG: jq result: '$suggested_message'" >&2

      # Extract credit usage information from billing section if available
      local credits_used credits_remaining cost warning_msgs
      credits_used=$(echo "$api_response" | jq -r '.billing.credits_used // empty' 2>/dev/null)
      credits_remaining=$(echo "$api_response" | jq -r '.billing.credits_remaining // empty' 2>/dev/null)
      cost=$(echo "$api_response" | jq -r '.billing.cost // empty' 2>/dev/null)
      
      # Extract warning messages from messages array - get just the text field
      warning_msgs=$(echo "$api_response" | jq -r '.messages[]?.text // empty' 2>/dev/null)

      # Display credit usage and remaining balance
      if [[ -n "$credits_used" && "$credits_used" != "empty" && "$credits_used" != "null" ]]; then
        print_info "Credits used: ${credits_used}" >&2
        # Store for summary display in temp file
        echo "CREDITS_USED=$credits_used" > /tmp/maiass_session_data.tmp
        echo "AI_MODEL=$ai_model" >> /tmp/maiass_session_data.tmp
      fi
      
      if [[ -n "$credits_remaining" && "$credits_remaining" != "empty" && "$credits_remaining" != "null" ]]; then
        print_credit_color $credits_remaining "${credits_remaining} Credits left" >&2
        # Store for summary display in temp file
        echo "CREDITS_REMAINING=$credits_remaining" >> /tmp/maiass_session_data.tmp
      fi
      
      if [[ -n "$cost" && "$cost" != "empty" && "$cost" != "null" ]]; then
        print_debug "Cost: $${cost}" >&2
      fi
      
      # Store warning messages for later display (after commit message suggestion)
      if [[ -n "$warning_msgs" && "$warning_msgs" != "empty" && "$warning_msgs" != "null" ]]; then
        # Store warnings in temp file for display in sign-off
        echo "AI_WARNINGS<<EOF" >> /tmp/maiass_session_data.tmp
        echo "$warning_msgs" >> /tmp/maiass_session_data.tmp
        echo "EOF" >> /tmp/maiass_session_data.tmp
      fi
    fi

    # Fallback to sed parsing if jq not available or failed
    if [[ -z "$suggested_message" ]]; then
      print_debug "DEBUG: jq failed, trying sed parsing" >&2
      # Handle the actual AI response structure with nested objects
      suggested_message=$(echo "$api_response" | sed -n 's/.*"content":"\([^"]*\)".*/\1/p' | tail -1)
      print_debug "DEBUG: sed result: '$suggested_message'"
    fi

    # Last resort: simple grep approach
    if [[ -z "$suggested_message" ]]; then
      print_debug "DEBUG: sed failed, trying grep approach"
      suggested_message=$(echo "$api_response" | grep -o '"content":"[^"]*"' | sed 's/"content":"//' | sed 's/"$//' | tail -1)
      print_debug "DEBUG: grep result: '$suggested_message'"
    fi

    # Show raw API response if debug mode and parsing failed
    if [[ "$debug_mode" == "true" && -z "$suggested_message" ]]; then
      print_debug "All parsing methods failed. Raw API response:"
      if [[ ${#api_response} -lt 1000 ]]; then
        print_debug "$api_response"
      else
        print_debug "${api_response:0:1000}...[truncated]"
      fi
    fi

    # Clean up escaped characters and markdown formatting
    suggested_message=$(echo "$suggested_message" | sed 's/\\n/\n/g' | sed 's/\\t/\t/g' | sed 's/\\\\/\\/g')

    # Remove markdown code blocks (triple backticks)
    suggested_message=$(echo "$suggested_message" | sed '/^```/d')

    # Remove extra quotes that might wrap the entire message
    suggested_message=$(echo "$suggested_message" | sed "s/^'\\(.*\\)'$/\\1/" | sed 's/^"\\(.*\\)"$/\\1/')

    # Clean up the message - remove leading empty lines and format bullet points
    # Remove leading empty lines
    suggested_message=$(printf '%s' "$suggested_message" | sed '/./,$!d')
    
    # Remove leading/trailing whitespace from each line and add proper formatting
    suggested_message=$(printf '%s' "$suggested_message" | sed 's/^[[:space:]]*//' | sed 's/[[:space:]]*$//')
    
    # Add tab before bullet points for proper indentation
    suggested_message=$(printf '%s' "$suggested_message" | sed 's/^[[:space:]]*-[[:space:]]*/\t- /')

    # remove any empty lines at the beginning of suggested_message
    suggested_message=$(printf "%s" "$suggested_message" | sed '/./,$!d')

    print_debug "DEBUG: Final cleaned message: '$suggested_message'" >&2
    print_debug "DEBUG: Message length: ${#suggested_message} characters" >&2
    print_debug "DEBUG: First 100 chars with visible newlines: $(printf '%q' "${suggested_message:0:100}")" >&2
    print_debug "DEBUG: Message validation: non-empty=$(test -n "$suggested_message" && echo "true" || echo "false"), not-null=$(test "$suggested_message" != "null" && echo "true" || echo "false")" >&2

    if [[ -n "$suggested_message" && "$suggested_message" != "null" ]]; then
      print_debug "DEBUG: Message validation passed, returning suggestion" >&2
      echo "$suggested_message"
      return 0
    else
      print_debug "DEBUG: No valid message extracted (empty or null)"
    fi
  else
    print_debug "DEBUG: Empty API response"
  fi

  # Return empty if AI suggestion failed
  return 1
}

fi # __SRC__Volumes_enigmadev_enigmadev_static_maiass_whole_bashmaiass_lib_core_ai_sh
# --- End inlined: /Volumes/enigmadev/enigmadev/static/maiass-whole/bashmaiass/lib/core/ai.sh ---

# --- Begin inlined: /Volumes/enigmadev/enigmadev/static/maiass-whole/bashmaiass/lib/core/commit.sh ---
if [[ -z "${__SRC__Volumes_enigmadev_enigmadev_static_maiass_whole_bashmaiass_lib_core_commit_sh:-}" ]]; then __SRC__Volumes_enigmadev_enigmadev_static_maiass_whole_bashmaiass_lib_core_commit_sh=1

function get_commit_message() {
  commit_message=""
  jira_ticket_number=""
  local ai_suggestion=""
  local use_ai=false

  # Extract Jira ticket number from branch name if present
  if [[ "$branch_name" =~ .*/([A-Z]+-[0-9]+) ]]; then
      jira_ticket_number="${BASH_REMATCH[1]}"
      # if we have a jira ticket number, export it
      export jira_ticket_number
      print_info "Jira Ticket Number: ${BWhite}$jira_ticket_number${Color_Off}"
  fi

  # Handle AI commit message modes
  print_debug "DEBUG: ai_mode='$ai_mode', ai_token length=${#ai_token}"

  # If no token, attempt to create anonymous token immediately
  if [[ -z "$ai_token" ]]; then
    print_debug "DEBUG: No AI token found, attempting to create anonymous subscription for fallback..." "always"
    if create_anonymous_subscription; then
      ai_token="$MAIASS_AI_TOKEN"
      print_debug "DEBUG: Anonymous token created, ai_token length now ${#ai_token}"
    else
      print_warning "Failed to create anonymous subscription. AI features will be disabled."
      export ai_mode="off"
    fi
  fi

  case "$ai_mode" in
    "ask")
      print_debug "DEBUG: AI mode is 'ask'"
      if [[ -n "$ai_token" ]]; then
        print_debug "DEBUG: Token available, showing AI prompt"
        read -n 1 -s -p "$(echo -e ${BYellow}Would you like to use AI to suggest a commit message? [y/N]${Color_Off} )" REPLY
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
          print_debug "DEBUG: User chose to use AI"
          use_ai=true
        else
          print_debug "DEBUG: User declined AI (reply='$REPLY')"
        fi
      else
        # If ai_token is empty (length zero) and _MAIASS_NEED_ANON_TOKEN is true, try to create anonymous token now
        if [[ -z "$ai_token" && "$_MAIASS_NEED_ANON_TOKEN" == "true" ]]; then
          print_debug "DEBUG: ai_token length is zero and _MAIASS_NEED_ANON_TOKEN=true, attempting to create anonymous subscription..."
          if create_anonymous_subscription; then
            ai_token="$MAIASS_AI_TOKEN"
            print_debug "DEBUG: Anonymous token created in fallback, ai_token length now ${#ai_token}"
            export _MAIASS_NEED_ANON_TOKEN=""
            # Now that we have a token, show the AI prompt
            print_debug "DEBUG: Token available after fallback, showing AI prompt"
            read -n 1 -s -p "$(echo -e ${BYellow}Would you like to use AI to suggest a commit message? [y/N]${Color_Off} )" REPLY
            echo
            if [[ $REPLY =~ ^[Yy]$ ]]; then
              print_debug "DEBUG: User chose to use AI"
              use_ai=true
            else
              print_debug "DEBUG: User declined AI (reply='$REPLY')"
            fi
          else
            print_warning "Failed to create anonymous subscription. AI features will be disabled."
            export ai_mode="off"
          fi
        else
          print_debug "DEBUG: No token available for AI"
        fi
      fi
      ;;
    "autosuggest")
      print_debug "DEBUG: AI mode is 'autosuggest'"
      if [[ -n "$ai_token" ]]; then
        use_ai=true
      fi
      ;;
    "off")
      print_debug "DEBUG: AI mode is 'off'"
      use_ai=false
      ;;
    *)
      print_debug "DEBUG: Unknown AI mode '$ai_mode', defaulting to 'ask'"
      ai_mode="ask"
      if [[ -n "$ai_token" ]]; then
        use_ai=true
      else
        print_info "AI commit messages available. Set MAIASS_AI_TOKEN to enable." "brief"
        use_ai=false
      fi
      ;;
  esac

  print_debug "DEBUG: use_ai=$use_ai"

  # Try to get AI suggestion if requested
  if [[ "$use_ai" == true ]]; then
    print_debug "Getting AI commit message suggestion..."
    
    if ai_suggestion=$(get_ai_commit_suggestion); then
      # Success - we got a valid AI suggestion
      print_info "${BMagenta}Commit message suggestion from MAIASS:"
      # Only remove carriage returns, quotes are already handled in the AI function
      ai_suggestion="$(echo "$ai_suggestion" | sed 's/\r$//')"
      if [[ -n "$total_tokens" && "$total_tokens" != "null" && "$total_tokens" != "empty" ]]; then
        print_always "Token usage: ${total_tokens} total (${prompt_tokens:-0} prompt + ${completion_tokens:-0} completion)"
      fi
      print_gradient_line 50
      echo -e "${Bold}${Reverse}$ai_suggestion${Color_Off}"
      print_gradient_line 50
      echo

      # Ask user if they want to use the AI suggestion
      read -n 1 -s -p "$(echo -e ${BYellow}Use this AI suggestion? [Y/n/e=edit]${Color_Off} )" REPLY
      echo

      case "$REPLY" in
        [Nn])
          print_info "AI suggestion declined, entering manual mode" "brief"
          use_ai=false
          ;;
        [Ee])
          print_info "Edit mode: You can modify the AI suggestion" "brief"
          echo -e "${BCyan}Current AI suggestion:${Color_Off}"
          echo -e "${BWhite}$ai_suggestion${Color_Off}"
          echo
          echo -e "${BCyan}Enter your modified commit message (press Enter three times when finished, or just Enter to keep AI suggestion):${Color_Off}"

          # Read multi-line input
          commit_message=""
          line_count=0
          empty_line_count=0
          while true; do
            read -r line
            if [[ -z "$line" ]]; then
              empty_line_count=$((empty_line_count + 1))
              if [[ $line_count -eq 0 && $empty_line_count -eq 1 ]]; then
                # First empty line with no input - use AI suggestion
                commit_message="$ai_suggestion"
                print_info "Using original AI suggestion"
                break
              elif [[ $empty_line_count -ge 2 ]]; then
                # Two consecutive empty lines (three Enter presses) - finish input
                break
              fi
              continue
            else
              # Reset empty line counter when we get non-empty input
              empty_line_count=0
            fi
            if [[ $line_count -gt 0 ]]; then
              commit_message+=$'\n'
            fi
            commit_message+="$line"
            ((line_count++))
          done
          ;;
        *)
          # Default: accept AI suggestion
          commit_message="$ai_suggestion"
          ;;
      esac
    else
      print_warning "AI suggestion failed, falling back to manual entry"
      use_ai=false
    fi
  fi

  # Manual commit message entry if AI not used or failed
  if [[ "$use_ai" == false && -z "$commit_message" ]]; then
    if [[ -n "$jira_ticket_number" ]]; then
      print_info "Enter a commit message ${BWhite}(Jira ticket $jira_ticket_number will be prepended)${Color_Off}"
    else
      print_info "Enter a commit message ${BWhite}(starting with Jira Ticket# when relevant)${Color_Off}"
      print_info "Please enter a ticket number or 'fix:' or 'feature:' or 'devops:' to start the commit message"
    fi

    echo -e "${BCyan}Enter ${BYellow}multiple lines${BCyan} (press Enter ${BYellow}three times${BCyan} to finish)${Color_Off}:"

    commit_message=""
    first_line=true
    empty_line_count=0
    while true; do
        read -r line
        # Check for empty line
        if [[ -z "$line" ]]; then
            empty_line_count=$((empty_line_count + 1))
            # Need two consecutive empty lines (three Enter presses) to finish
            if [[ $empty_line_count -ge 2 ]]; then
                break
            fi
            continue
        else
            # Reset empty line counter when we get non-empty input
            empty_line_count=0
        fi
        if [[ "$first_line" == true ]]; then
            # First line is the subject - do NOT auto-prepend a bullet; add with double newline for proper git format
            commit_message+="$line"$'\n\n'
            first_line=false
        else
            # Subsequent lines: auto-prepend bullet if not already present, then add with tab indent and single newline
            if [[ ! "$line" =~ ^[[:space:]]*-[[:space:]] ]]; then
                line="- $line"
            fi
            commit_message+="    $line"$'\n'

        fi
    done
    # Remove one trailing newline if present:
    commit_message="${commit_message%$'\n'}"
  fi
  internal_commit_message="[$(git config user.name)] $commit_message"
  # Prepend Jira ticket number if found and not already present
  if [[ -n "$jira_ticket_number" && ! "$commit_message" =~ ^$jira_ticket_number ]]; then
    commit_message="$jira_ticket_number $commit_message"
    internal_commit_message="$jira_ticket_number $internal_commit_message"
  fi
  # prepend with author of commit
  # Abort if the commit message is still empty
  if [[ -z "$commit_message" ]]; then
      echo "Aborting commit due to empty commit message."
      exit 1
  fi

  # Export the commit message and jira ticket number for use by calling function
  export internal_commit_message
  export commit_message
  export jira_ticket_number
}

run_ai_commit_only() {
  echo "this feature is not yet supported"
}

handle_staged_commit() {
          print_info "Staged changes detected:"
          git diff --cached --name-status

          get_commit_message
          # Use git commit -F - to properly handle multi-line commit messages

          # For backward compatibility, treat debug_mode=true as verbosity_level=debug
          if [[ "$debug_mode" == "true" && "$verbosity_level" != "debug" ]]; then
            # Only log this when not already in debug verbosity to avoid noise
            log_message "DEPRECATED: Using debug_mode=true is deprecated. Please use MAIASS_VERBOSITY=debug instead."
            # Treat as if verbosity_level is debug
            local effective_verbosity="debug"
          else
            local effective_verbosity="$verbosity_level"
          fi

          if [[ "$effective_verbosity" == "debug" ]]; then
            # leave this for future debugging
            echo "$commit_message" | git commit -F - >/dev/null 2>&1
          else
            echo "$commit_message" | git commit -F - >/dev/null 2>&1
          fi

          check_git_success
          tagmessage=$commit_message
          export tagmessage
          print_success "Changes committed successfully"
          # Sanitize commit message for CSV/Google Sheets compatibility
          # Replace all newlines with semicolons and a space
          local devlog_message="${commit_message//$'\n'/; }"

          # Escape double quotes if needed
          devlog_message="${devlog_message//\"/\\\"}"
          logthis "${commit_message//$'\n'/; }"
          if remote_exists "origin"; then
            # y to push upstream
            read -n 1 -s -p "$(echo -e ${BYellow}Do you want to push this commit to remote? [y/N]${Color_Off} )" REPLY
            echo
            if [[ $REPLY =~ ^[Yy]$ ]]; then
              run_git_command "git push --set-upstream origin '$branch_name'" "debug"
              check_git_success
              echo -e "${BGreen}Commit pushed.${Color_Off}"
            fi
          else
            print_warning "No remote found."
          fi
}

offer_to_stage_changes() {
  print_warning "No staged changes found, but there are uncommitted changes."
  read -n 1 -s -p "$(echo -e ${BYellow}Do you want to stage all changes and commit? [y/N]${Color_Off} )" REPLY
  echo
  if [[ $REPLY =~ ^[Yy]$ ]]; then
    git add -A
    handle_staged_commit
  else
    print_error "Aborting. No staged changes to commit."
    exit 1
  fi
}

check_git_commit_status() {
  print_section "Checking Git Status"
  if has_staged_changes; then
    handle_staged_commit
  elif has_uncommitted_changes; then
    offer_to_stage_changes
  else
    echo -e "${BGreen}Nothing to commit. Working directory clean.${Color_Off}"
    exit 0
  fi
}
# Check for uncommitted changes and offer to commit them
function checkUncommittedChanges(){
  print_debug "Checking for Changes"
  
  local has_staged has_unstaged
  has_staged=$(has_staged_changes && echo "true" || echo "false")
  has_unstaged=$(has_unstaged_changes && echo "true" || echo "false")
  
  print_debug "Change detection: staged=$has_staged, unstaged=$has_unstaged, ai_commits_only=${ai_commits_only:-unset}"
  
  # If there are unstaged changes, we must force commits-only mode
  if [[ $has_unstaged == "true" ]]; then
    print_warning "There are unstaged changes in your working directory"
    read -n 1 -s -p "$(echo -e ${BYellow}Do you want to ${BRed}stage and commit${BYellow} them? [y/N]${Color_Off} )" REPLY
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
      git add -A
      handle_staged_commit
      
      # Check if working directory is now clean after staging and committing
      if ! has_unstaged_changes; then
        # Working directory is clean, check if user wants commits-only mode
        if [[ $ai_commits_only == 'true' ]]; then
          print_success "Commit process completed (commits-only mode)."
          print_signoff_with_topup
          exit 0
        else
          print_success "Commit process completed. Proceeding with merge/release pipeline..."
          return 0  # Continue to merge/release pipeline
        fi
      else
        # Still have unstaged changes after commit
        print_success "Commit process completed."
        print_info "Cannot proceed with merge/release pipeline - unstaged changes remain in working directory"
        print_info "To continue with merge/release pipeline, commit or stash all changes first"
        print_signoff_with_topup
        exit 0
      fi
    else
      # User chose not to stage unstaged changes
      if [[ $has_staged == "true" ]]; then
        print_info "Committing staged changes only (unstaged changes remain)"
        handle_staged_commit
      fi
      
      # Force exit since unstaged changes remain
      print_success "Commit process completed."
      print_info "Cannot proceed with merge/release pipeline - unstaged changes remain in working directory"
      print_info "To continue with merge/release pipeline, commit or stash all changes first"
      print_signoff_with_topup
      exit 0
    fi
    
  # If only staged changes, proceed normally
  elif [[ $has_staged == "true" ]]; then
    print_info "Found staged changes ready for commit"
    handle_staged_commit
    
    # Check if user has commits-only mode enabled
    if [[ $ai_commits_only == 'true' ]]; then
      print_success "Commit process completed (commits-only mode)."
      print_signoff_with_topup
      exit 0
    else
      print_success "Commit process completed. Proceeding with merge/release pipeline..."
    fi
    
  # No changes at all
  else
    if [[ $ai_commits_only == 'true' ]]; then
      print_info "No changes found (commits-only mode)."
      print_signoff_with_topup
      exit 0
    else
      print_info "No changes found. Proceeding with merge/release pipeline..."
    fi
  fi
}

fi # __SRC__Volumes_enigmadev_enigmadev_static_maiass_whole_bashmaiass_lib_core_commit_sh
# --- End inlined: /Volumes/enigmadev/enigmadev/static/maiass-whole/bashmaiass/lib/core/commit.sh ---

# --- Begin inlined: /Volumes/enigmadev/enigmadev/static/maiass-whole/bashmaiass/lib/utils/help.sh ---
if [[ -z "${__SRC__Volumes_enigmadev_enigmadev_static_maiass_whole_bashmaiass_lib_utils_help_sh:-}" ]]; then __SRC__Volumes_enigmadev_enigmadev_static_maiass_whole_bashmaiass_lib_utils_help_sh=1

# Function to display help information
show_help() {
  # Define colors for help output
  local BBlue='\033[1;34m'
  local BWhite='\033[1;37m'
  local BGreen='\033[1;32m'
  local BYellow='\033[1;33m'
  local BRed='\033[1;31m'
  local BCyan='\033[1;36m'
  local Color_Off='\033[0m'
  local BLime='\033[1;32m'
  local Gray="\033[0;37m"  # Gray for default text

  echo -e "${BBlue}"
   cat <<-'EOF'
        ▄▄   ▄▄ ▄▄▄▄▄▄▄ ▄▄▄ ▄▄▄▄▄▄▄ ▄▄▄▄▄▄▄ ▄▄▄▄▄▄▄
       █  █▄█  █       █   █       █       █       █
       █       █   ▄   █   █   ▄   █  ▄▄▄▄▄█  ▄▄▄▄▄█
       █       █  █▄█  █   █  █▄█  █ █▄▄▄▄▄█ █▄▄▄▄▄
       █       █       █   █       █▄▄▄▄▄  █▄▄▄▄▄  █
       █ ██▄██ █   ▄   █   █   ▄   █▄▄▄▄▄█ █▄▄▄▄▄█ █
       █▄█   █▄█▄▄█ █▄▄█▄▄▄█▄▄█ █▄▄█▄▄▄▄▄▄▄█▄▄▄▄▄▄▄█
EOF
  echo -e "${BAqua}\n       Modular AI-Augmented Semantic Scribe\n${BYellow}\n       * AI Commit Messages\n${BLime}       * Intelligent Git Workflow Automation${Color_Off}\n"

  echo -e "${BWhite}DESCRIPTION:${Color_Off}"
  echo -e "  Automated version bumping and changelog management script that maintains"
  echo -e "  the develop branch as the source of truth for versioning. Integrates with"
  echo -e "  AI-powered commit messages and supports multi-repository workflows.\n"

  echo -e "${BWhite}USAGE:${Color_Off}"
  echo -e "  maiass [VERSION_TYPE] [OPTIONS]\n"
  echo -e "${BWhite}VERSION_TYPE:${Color_Off}"
  echo -e "  major          Bump major version (e.g., 1.2.3 → 2.0.0)"
  echo -e "  minor          Bump minor version (e.g., 1.2.3 → 1.3.0)"
  echo -e "  patch          Bump patch version (e.g., 1.2.3 → 1.2.4) ${Gray}[default]${Color_Off}"
  echo -e "  X.Y.Z          Set specific version number\n"
  echo -e "${BWhite}OPTIONS:${Color_Off}"
  echo -e "  -h, --help     Show this help message"
  echo -e "  -v, --version  Show version information\n"

  echo -e "${BWhite}QUICK START:${Color_Off}"
  echo -e "  ${BGreen}1.${Color_Off} Run ${BCyan}maiass${Color_Off} in your git repository"
  echo -e "  ${BGreen}2.${Color_Off} For AI features: Set ${BRed}MAIASS_AI_TOKEN${Color_Off} environment variable"
  echo -e "  ${BGreen}3.${Color_Off} Everything else works with sensible defaults!\n"

  echo -e "${BWhite}AI COMMIT INTELLIGENCE WORKFLOW:${Color_Off}"
  echo -e "MAIASS manages code changes in the following way:"
  echo -e "  ${BGreen}1.${Color_Off} Asks if you would like to commit your changes"
  echo -e "  ${BGreen}2.${Color_Off} If AI is available and switched in ask mode, asks if you'd like an ai suggestion"
  echo -e "  ${BGreen}3.${Color_Off} If yes or in autosuggest mode, suggests a commit mesage"
  echo -e "  ${BGreen}3.${Color_Off} You can use it or enter manual commit mode (multiline) at the prompt"
  echo -e "  ${BGreen}4.${Color_Off} Offers to merge to develop, which initiates the version and changelog workflow"
  echo -e "  ${BGreen}5.${Color_Off} If you just want ai commit suggestions and no further workflow, say no\n"

  echo -e "${BWhite}VERSION AND CHANGELOG WORKFLOW:${Color_Off}"
  echo -e "MAIASS manages version bumping and changelogging in the following way:"
  echo -e "  ${BGreen}1.${Color_Off} Merges feature branch → develop"
  echo -e "  ${BGreen}2.${Color_Off} Creates release/x.x.x branch from develop"
  echo -e "  ${BGreen}3.${Color_Off} Updates version files and changelog on release branch"
  echo -e "  ${BGreen}4.${Color_Off} Commits and pushes release branch"
  echo -e "  ${BGreen}5.${Color_Off} Merges release branch back to develop"
  echo -e "  ${BGreen}6.${Color_Off} Returns to original feature branch\n"

  echo -e "  ${BYellow}Git Flow Diagram:${Color_Off}"
  echo -e "${BAqua}    feature/xyz ──┐"
  echo -e "                  ├─→ develop ──→ release/1.2.3 ──┐"
  echo -e "    feature/abc ──┘                                ├─→ develop"
  echo -e "                                                    └─→ (tagged)\n${Color_Off}"

  echo -e "  ${BYellow}Note:${Color_Off} Script will not bump versions if develop branch requires"
  echo -e "  pull requests, as PR workflows are outside the scope of this script.\n"

  echo -e "${BWhite}EXAMPLES:${Color_Off}"
  echo -e "  maiass                         # Bump patch version with interactive prompts"
  echo -e "  maiass minor                   # Bump minor version"
  echo -e "  maiass major                   # Bump major version"
  echo -e "  maiass 2.1.0                   # Set specific version\n"

  echo -e "${BRed}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${Color_Off}"
  echo -e "${BRed}                            CONFIGURATION (OPTIONAL)${Color_Off}"
  echo -e "${BRed}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${Color_Off}\n"

  echo -e "${BWhite}🤖 AI FEATURES:${Color_Off}"
  echo -e "  ${BRed}MAIASS_AI_TOKEN${Color_Off}          Optional but ${BRed}REQUIRED${Color_Off} if you want AI commit messages"
  echo -e "  MAIASS_AI_MODE           ${Gray}('ask')${Color_Off} 'off', 'autosuggest'"
  echo -e "  MAIASS_AI_MODEL          ${Gray}('gpt-4o')${Color_Off} AI model to use"

  echo -e "${BWhite}📊 OUTPUT CONTROL:${Color_Off}"
  echo -e "  MAIASS_VERBOSITY             ${Gray}('brief')${Color_Off} 'normal', 'debug'"
  echo -e "  MAIASS_ENABLE_LOGGING        ${Gray}('false')${Color_Off} 'true' to log to file"
  echo -e "  MAIASS_LOG_FILE              ${Gray}('maiass.log')${Color_Off} Log file path\n"
  echo -e "${BWhite}🌿 GIT WORKFLOW:${Color_Off}"
  echo -e "  MAIASS_DEVELOPBRANCH         ${Gray}('develop')${Color_Off} Override develop branch name"
  echo -e "  MAIASS_STAGINGBRANCH         ${Gray}('staging')${Color_Off} Override staging branch name"
  echo -e "  MAIASS_MASTERBRANCH          ${Gray}('master')${Color_Off} Override master branch name"
  echo -e "  MAIASS_STAGING_PULLREQUESTS  ${Gray}('on')${Color_Off} 'off' to disable staging pull requests"
  echo -e "  MAIASS_MASTER_PULLREQUESTS   ${Gray}('on')${Color_Off} 'off' to disable master pull requests\n"

  echo -e "${BWhite}🔗 REPOSITORY INTEGRATION:${Color_Off}"
  echo -e "  MAIASS_GITHUB_OWNER          ${Gray}(auto-detected)${Color_Off} Override GitHub owner"
  echo -e "  MAIASS_GITHUB_REPO           ${Gray}(auto-detected)${Color_Off} Override GitHub repo name"
  echo -e "  MAIASS_BITBUCKET_WORKSPACE   ${Gray}(auto-detected)${Color_Off} Override Bitbucket workspace"
  echo -e "  MAIASS_BITBUCKET_REPO_SLUG   ${Gray}(auto-detected)${Color_Off} Override Bitbucket repo slug\n"

  echo -e "${BWhite}🌐 BROWSER INTEGRATION for pull requests:${Color_Off}"
  echo -e "  MAIASS_BROWSER               ${Gray}(system default)${Color_Off} Browser for URLs"
  echo -e "                                   Supported: Chrome, Firefox, Safari, Brave, Scribe"
  echo -e "  MAIASS_BROWSER_PROFILE       ${Gray}('Default')${Color_Off} Browser profile to use\n"

  echo -e "${BWhite}📁 CUSTOM VERSION FILES:${Color_Off}"
  echo -e "  ${BYellow}For projects with non-standard version file structures:${Color_Off}"
  echo -e "  MAIASS_VERSION_PRIMARY_FILE        Primary version file path"
  echo -e "  MAIASS_VERSION_PRIMARY_TYPE        ${Gray}('txt')${Color_Off} 'json', 'php' or 'txt' or 'pattern'"
  echo -e "  MAIASS_VERSION_PRIMARY_LINE_START  Line prefix for txt files"
  echo -e "  MAIASS_VERSION_SECONDARY_FILES     Secondary files (pipe-separated)"
  echo -e "  MAIASS_CHANGELOG_INTERNAL_NAME     alternate name for your internal changelog\n"

  echo -e "  ${BYellow}Examples:${Color_Off}"
  echo -e "    ${Gray}# WordPress theme with style.css version${Color_Off}"
  echo -e "    MAIASS_VERSION_PRIMARY_FILE=\"style.css\""
  echo -e "    MAIASS_VERSION_PRIMARY_TYPE=\"txt\""
  echo -e "    MAIASS_VERSION_PRIMARY_LINE_START=\"Version: \"\n"
  echo -e "    ${Gray}# PHP constant with pattern matching${Color_Off}"
  echo -e "    MAIASS_VERSION_PRIMARY_FILE=\"functions.php\""
  echo -e "    MAIASS_VERSION_PRIMARY_TYPE=\"pattern\""
  echo -e "    MAIASS_VERSION_PRIMARY_LINE_START=\"define('VERSION','{version}');\"\n"
  echo -e "${BRed}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${Color_Off}"
  echo -e "${BRed}                               FEATURES & COMPATIBILITY${Color_Off}"
  echo -e "${BRed}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${Color_Off}\n"

  echo -e "${BWhite}✨ KEY FEATURES:${Color_Off}"
  echo -e "  • ${BGreen}AI-powered commit messages${Color_Off} via AI integration"
  echo -e "  • ${BGreen}Automatic changelog generation${Color_Off} and management"
  echo -e "  • ${BGreen}Multi-repository support${Color_Off} (WordPress, Craft, bespoke projects)"
  echo -e "  • ${BGreen}Git workflow automation${Color_Off} (commit, tag, merge, push)"
  echo -e "  • ${BGreen}Intelligent version management${Color_Off} for diverse file structures"
  echo -e "  • ${BGreen}Jira ticket detection${Color_Off} from branch names\n"

  echo -e "${BWhite}🔄 REPOSITORY COMPATIBILITY:${Color_Off}"
  echo -e "  ${BYellow}Automatically adapts to your repository structure:${Color_Off}"
  echo -e "  ${BGreen}✓${Color_Off} Full Git Flow (develop → staging → master)"
  echo -e "  ${BGreen}✓${Color_Off} Simple workflow (feature → master)"
  echo -e "  ${BGreen}✓${Color_Off} Local-only repositories (no remote required)"
  echo -e "  ${BGreen}✓${Color_Off} Single branch workflows"
  echo -e "  ${BGreen}✓${Color_Off} Projects without version files (git-only mode)\n"

  echo -e "${BWhite}⚙️ SYSTEM REQUIREMENTS:${Color_Off}"
  echo -e "  ${BGreen}✓${Color_Off} Unix-like system (macOS, Linux, WSL)"
  echo -e "  ${BGreen}✓${Color_Off} Bash 3.2+ (macOS default supported)"
  echo -e "  ${BGreen}✓${Color_Off} Git command-line tools"
  echo -e "  ${BYellow}✓${Color_Off} jq (JSON processor) ${Gray}- required${Color_Off}\n"

  echo -e "  ${BYellow}Install jq:${Color_Off} ${Gray}brew install jq${Color_Off} (macOS) | ${Gray}sudo apt install jq${Color_Off} (Ubuntu)\n"

  echo -e "${BWhite}📝 CONFIGURATION:${Color_Off}"
  echo -e "  Global configuration loaded from system"
  echo -e "  Global overridden by Configuration loaded from ${BCyan}.maiass.env${Color_Off} files in current directory."
  echo -e "  ${Gray}Most settings are optional with sensible defaults!${Color_Off}\n"

  echo -e "${BGreen}Ready to get started? Just run:${Color_Off} ${BCyan}maiass${Color_Off}"
}

# Function to display help information for committhis
show_help_committhis() {
                      local BBlue='\033[1;34m'
                      local BWhite='\033[1;37m'
                      local BGreen='\033[1;32m'
                      local BYellow='\033[1;33m'
                      local BCyan='\033[1;36m'
                      local Color_Off='\033[0m'

                      echo -e "${BBlue}committhis - AI-powered Git commit message generator${Color_Off}"
                      echo
                      echo -e "${BWhite}Usage:${Color_Off}"
                      echo -e "  ${BGreen}committhis${Color_Off}"
                      echo
                      echo -e "${BWhite}Environment Configuration:${Color_Off}"
                      echo -e "  ${BCyan}MAIASS_AI_TOKEN${Color_Off}      Your AI API token (required)"
                      echo -e "  ${BCyan}MAIASS_AI_MODE${Color_Off}       Commit mode:"
                      echo -e "                                 ask (default), autosuggest, off"
                      echo -e "  ${BCyan}MAIASS_AI_COMMIT_MESSAGE_STYLE${Color_Off}"
                      echo -e "                                 Message style: bullet (default), conventional, simple"
                      echo -e "  ${BCyan}MAIASS_AI_ENDPOINT${Color_Off}   Custom AI endpoint (optional)"
                      echo
                      echo -e "${BWhite}Files (optional):${Color_Off}"
                      echo -e "  ${BGreen}.env${Color_Off}                     Can define the variables above"
                      echo -e "  ${BGreen}.maiass.prompt${Color_Off}           Custom AI prompt override"
                      echo
                      echo -e "committhis analyzes your staged changes and suggests an intelligent commit message."
                      echo -e "You can accept, reject, or edit it before committing."
                      echo
                      echo -e "This script does not manage versions, changelogs, or branches."
                    }

fi # __SRC__Volumes_enigmadev_enigmadev_static_maiass_whole_bashmaiass_lib_utils_help_sh
# --- End inlined: /Volumes/enigmadev/enigmadev/static/maiass-whole/bashmaiass/lib/utils/help.sh ---

function initialiseBump() {

  print_header "$header"
  print_info "This script will help you bump the version number and manage your git workflow" "brief"
  print_info "Press ${BWhite}ctrl+c${Color_Off} to abort at any time\n" "brief"

  # Load MAIASS_* variables from .env (these override environment variables)
  load_bumpscript_env

  # Initialize all variables after loading env
  setup_bumpscript_variables

  # Check and handle .gitignore for log files if logging is enabled
  check_gitignore_for_logs
  
  # Check and handle .gitignore for environment files
  check_gitignore_for_env

  # Ensure we're in a git repository
  check_git_repository

  # Bootstrap project if needed (interactive setup for new projects)
  bootstrap_project

  export GIT_MERGE_AUTOEDIT=no
  
  # Handle empty repository case (no commits yet)
  if git rev-parse --verify HEAD >/dev/null 2>&1; then
    tagmessage=$(git log -1 --pretty=%B)
    branch_name=$(git rev-parse --abbrev-ref HEAD)
  else
    tagmessage=""
    # Get branch name even without commits
    branch_name=$(git symbolic-ref --short HEAD 2>/dev/null || echo "main")
  fi
  
  export tagmessage
  export branch_name
  humandate=$(date +"%d %B %Y")
  longhumandate=$(date +"%d %B %Y (%A)")
  export humandate
  export longhumandate

  # Check for env var override BEFORE branch detection
  if [[ "$MAIASS_MODE" == "ai_only" ]]; then
      export ai_commits_only=true
  fi

  branchDetection

  # Initialize path variables with default values for version file detection
  export package_json_path="${MAIASS_PACKAGE_PATH:-.}"
  export version_file_path="${MAIASS_VERSION_PATH:-.}"

  # Check if version files exist before running version management
  local has_version_files=false

  # Check for custom primary version file first
  if [[ -n "$version_primary_file" && -f "$version_primary_file" ]]; then
    has_version_files=true
  # Check for default version files
  elif [[ -f "${package_json_path}/package.json" ]] || [[ -f "${version_file_path}/VERSION" ]]; then
    has_version_files=true
  fi

  print_debug "Verion primary file: ${BYellow}${version_primary_file}${Color_Off}" 
  echo
  print_debug "has version files: ${BYellow}$has_version_files${Color_Off}" 

  # if $ai_commits_only exit 0
  if [[ "$ai_commits_only" == "true" ]]; then
    checkUncommittedChanges
    echo -e "${BAqua}Mode is commits only. \nWe are done and on $branch_name branch.${Color_Off}"
    print_signoff_with_topup
    exit 0
  fi

  if [[ "$has_version_files" == "true" ]]; then
    changeManagement
  else
    print_warning "No version files found (package.json or VERSION)"
    print_info "Skipping version bumping and changelog management"
    print_info "Will proceed with git workflow only\n"
    # Still check for uncommitted changes even without version files
    checkUncommittedChanges
  fi

  mergeDevelop "$has_version_files" "$@"
  deployOptions
}

# Parse command line arguments

# Token management switches
for arg in "$@"; do
  case $arg in
    -h|--help)
      show_help
      exit 0
      exit 0
      ;;
    -v|--version)
      version="$MAIASS_CLIENT_VERSION"
      echo "MIASS v$version"
      exit 0
      ;;
    --delete-token)
      print_info "Deleting stored AI token..." "always"
      remove_secure_variable "MAIASS_AI_TOKEN"
      print_success "AI token deleted from secure storage (if it existed)." "always"
      exit 0
      ;;
    --update-token)
      print_info "Updating stored AI token..." "always"
      remove_secure_variable "MAIASS_AI_TOKEN"
      echo -n "Enter new AI token: "
      read -s new_token
      echo
      if [[ -n "$new_token" ]]; then
        store_secure_variable "MAIASS_AI_TOKEN" "$new_token"
        print_success "New AI token stored securely." "always"
      else
        print_warning "No token entered. Nothing stored." "always"
      fi
      exit 0
      ;;
    --account-info)
      # Query account info from maiass-proxy
      # Ensure secure variables are loaded (including token acquisition if needed)
      load_secure_variables
      
      # Check if we need to create an anonymous token
      if [[ "$_MAIASS_NEED_ANON_TOKEN" == "true" ]]; then

# --- Begin inlined: /Volumes/enigmadev/enigmadev/static/maiass-whole/bashmaiass/lib/core/ai.sh ---
if [[ -z "${__SRC__Volumes_enigmadev_enigmadev_static_maiass_whole_bashmaiass_lib_core_ai_sh:-}" ]]; then __SRC__Volumes_enigmadev_enigmadev_static_maiass_whole_bashmaiass_lib_core_ai_sh=1

fi # __SRC__Volumes_enigmadev_enigmadev_static_maiass_whole_bashmaiass_lib_core_ai_sh
# --- End inlined: /Volumes/enigmadev/enigmadev/static/maiass-whole/bashmaiass/lib/core/ai.sh ---

        if create_anonymous_subscription; then
          print_info "Anonymous subscription created successfully."
          export _MAIASS_NEED_ANON_TOKEN=""
        else
          print_warning "Failed to create anonymous subscription."
          exit 1
        fi
      fi
      
      api_key="${MAIASS_AI_TOKEN:-}"
      if [[ -z "$api_key" || "$api_key" == "DISABLED" ]]; then
        if [[ "${ai_mode:-ask}" != "off" ]]; then
          print_debug "No AI token found, exporting _MAIASS_NEED_ANON_TOKEN=true for fallback in commit logic..." "always"
          export _MAIASS_NEED_ANON_TOKEN="true"
        else
          print_warning "AI mode is off. Skipping AI token setup." "always"
        fi
      fi

      # Debug: print _MAIASS_NEED_ANON_TOKEN before commit logic
      print_debug "DEBUG: _MAIASS_NEED_ANON_TOKEN is '$(_MAIASS_NEED_ANON_TOKEN)' just before commit logic"
      # Determine client version from script header
      client_version=$(grep -m1 '^# MAIASS' "${BASH_SOURCE[0]}" | sed -E 's/.* v([0-9]+\.[0-9]+\.[0-9]+).*/\1/')
      [[ -z "$client_version" ]] && client_version="0.0.0"
      client_name="bashmaiass"
      # Use new /account-info endpoint (GET preferred)
      base_host="${MAIASS_AI_HOST:-${MAIASS_HOST:-https://pound.maiass.net}}"
      endpoint="${base_host}/account-info"
      echo "[INFO] Querying account info at: $endpoint" >&2
      response=$(curl -s -w "\nHTTP_STATUS:%{http_code}\n" \
        -H "Authorization: Bearer $api_key" \
        -H "X-Client-Name: $client_name" \
        -H "X-Client-Version: $client_version" \
        "$endpoint")
      http_status=$(echo "$response" | awk -F'HTTP_STATUS:' 'NF>1{print $2}' | tail -n1)
      response_body=$(echo "$response" | sed '/^HTTP_STATUS:/d')
      last_endpoint="$endpoint"
      last_status="$http_status"
      # If error or missing fields, try POST fallback
      if [[ -z "$response_body" || "$response_body" == *'error'* || "$http_status" == "404" ]]; then
        echo "[INFO] Retrying with POST to $endpoint" >&2
        response=$(curl -s -w "\nHTTP_STATUS:%{http_code}\n" -X POST "$endpoint" \
          -H "Content-Type: application/json" \
          -H "X-Client-Name: $client_name" \
          -H "X-Client-Version: $client_version" \
          -d "{\"api_key\":\"$api_key\"}")
        http_status=$(echo "$response" | awk -F'HTTP_STATUS:' 'NF>1{print $2}' | tail -n1)
        response_body=$(echo "$response" | sed '/^HTTP_STATUS:/d')
        last_endpoint="$endpoint (POST)"
        last_status="$http_status"
      fi
      # If still not JSON or 404, try versioned path
      if [[ -z "$response_body" || "$response_body" == *'Not Found'* ]]; then
        endpoint_v1="${base_host}/v1/account-info"
        echo "[INFO] Fallback to: $endpoint_v1" >&2
        response=$(curl -s -w "\nHTTP_STATUS:%{http_code}\n" \
          -H "Authorization: Bearer $api_key" \
          -H "X-Client-Name: $client_name" \
          -H "X-Client-Version: $client_version" \
          "$endpoint_v1")
        http_status=$(echo "$response" | awk -F'HTTP_STATUS:' 'NF>1{print $2}' | tail -n1)
        response_body=$(echo "$response" | sed '/^HTTP_STATUS:/d')
        last_endpoint="$endpoint_v1"
        last_status="$http_status"
        if [[ -z "$response_body" || "$response_body" == *'error'* || "$http_status" == "404" ]]; then
          echo "[INFO] Retrying with POST to $endpoint_v1" >&2
          response=$(curl -s -w "\nHTTP_STATUS:%{http_code}\n" -X POST "$endpoint_v1" \
            -H "Content-Type: application/json" \
            -H "X-Client-Name: $client_name" \
            -H "X-Client-Version: $client_version" \
            -d "{\"api_key\":\"$api_key\"}")
          http_status=$(echo "$response" | awk -F'HTTP_STATUS:' 'NF>1{print $2}' | tail -n1)
          response_body=$(echo "$response" | sed '/^HTTP_STATUS:/d')
          last_endpoint="$endpoint_v1 (POST)"
          last_status="$http_status"
        fi
      fi
      # Helper: mask a sensitive token (show start and end only)
      mask_token() {
        local s="$1"; local n=${#s}
        if (( n <= 10 )); then echo "${s:0:1}***${s: -1}"; else echo "${s:0:6}***${s: -4}"; fi
      }

      # If JSON requested explicitly, print JSON (without exposing full token)
      if [[ "${MAIASS_ACCOUNT_INFO_JSON:-0}" == "1" ]]; then
        if command -v jq >/dev/null 2>&1 && [[ "$response_body" =~ ^\{ ]]; then
          echo "$response_body" | jq '{
            tokens_used: .tokens_used,
            tokens_remaining: .tokens_remaining,
            quota: .quota,
            subscription_type: .subscription_type,
            customer_email: .customer_email,
            status: .status
          }'
          exit 0
        else
          echo "[ERROR] JSON mode requested but response is not valid JSON (status: ${last_status:-unknown})." >&2
          [[ -n "$response_body" ]] && echo "$response_body" >&2
          exit 2
        fi
      fi

      # Human-readable summary (default)
      if command -v jq >/dev/null 2>&1 && [[ "$response_body" =~ ^\{ ]]; then
        # Extract fields safely
        tokens_used=$(echo "$response_body" | jq -r '.tokens_used // "-"')
        tokens_remaining=$(echo "$response_body" | jq -r '.tokens_remaining // "-"')
        quota=$(echo "$response_body" | jq -r '.quota // "-"')
        sub_type=$(echo "$response_body" | jq -r '.subscription_type // "-"')
        cust_email=$(echo "$response_body" | jq -r '.customer_email // "-"')
        status_field=$(echo "$response_body" | jq -r '.status // "-"')
      else
        # Fallback parsing when jq missing or non-JSON
        tokens_used="-"; tokens_remaining="-"; quota="-"; sub_type="-"; cust_email="-"; status_field="${last_status:-unknown}"
      fi

      masked_key=$(mask_token "$api_key")
      echo ""
      echo "Account Info"
      echo "------------"
      echo "API Token:        $masked_key"
      if [[ -n "${MAIASS_SUBSCRIPTION_ID:-}" ]]; then
        echo "Subscription ID:  ${MAIASS_SUBSCRIPTION_ID}"
      fi
      echo "Type:             ${sub_type}"
      echo "Email:            ${cust_email}"
      echo -e "${credit}s Used:     ${tokens_used}"
      echo -e "${credit}s Remaining:${tokens_remaining}"
      echo -e "Quota:            ${quota}"
      # Explain status codes clearly
      if [[ "${last_status:-}" == "403" || "$status_field" == "403" ]]; then
        echo "Status:          403 Forbidden"
        echo "Explanation:     Your token was rejected. Ensure it is correct, not expired, and associated with an active subscription."
      elif [[ "${last_status:-}" == "401" || "$status_field" == "401" ]]; then
        echo "Status:          401 Unauthorized"
        echo "Explanation:     Missing or invalid credentials. Try updating your token with '--update-token'."
      elif [[ "${last_status:-}" =~ ^2 && "${last_status:-}" != "" ]]; then
        echo "Status:          ${last_status} OK"
      else
        echo "Status:          ${last_status:-unknown}"
      fi
      echo ""
      exit 0
      
      ;;
    -aihelp|--committhis-help)
      echo "Usage: bma [options]"
      echo "Common options:"
      echo "  --account-info        Show your account status (masked token)"
      echo "  --update-token        Prompt to update and store your API token"
      echo "  --delete-token        Remove stored API token"
      echo "  -v, --version         Show version"
      echo "  -h, --help            Show help"
      exit 0
      ;;
    -aicv|--committhis-version)
      version="Unknown"
      script_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
      script_file="${BASH_SOURCE[0]}"
      version=$(grep -m1 '^# MAIASS' "$script_file" | sed -E 's/.* v([0-9]+\.[0-9]+\.[0-9]+).*/\1/')
      echo "COMMITTHIS v$version"
      exit 0
      ;;
    -co|-c|--commits-only)
      export ai_commits_only=true
      ;;
    -ai-commits-only)
      export ai_commits_only=true
      export brand="committhis"
      ;;
    --bootstrap|--setup)
      # Force bootstrap mode - will run setup even if .env.maiass exists
      export MAIASS_FORCE_BOOTSTRAP=true
      ;;
  esac
done

# Remove duplicate - already handled above before branchDetection

[[ "${BASH_SOURCE[0]}" == "${0}" ]] && initialiseBump "$@"

__PAYLOAD__
)"
